{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { findUpUntil } from '../internal/utils/dom';\nimport { CONSTRAINED_MAIN_PANEL_MIN_HEIGHT, CONSTRAINED_PAGE_HEIGHT, getSplitPanelDefaultSize, MAIN_PANEL_MIN_HEIGHT } from '../split-panel/utils/size-utils';\nimport ContentWrapper from './content-wrapper';\nimport { Drawer, DrawerTriggersBar } from './drawer';\nimport { ResizableDrawer } from './drawer/resizable-drawer';\nimport { MobileToolbar } from './mobile-toolbar';\nimport { Notifications } from './notifications';\nimport { SideSplitPanelDrawer, SPLIT_PANEL_MIN_WIDTH, SplitPanelProvider } from './split-panel';\nimport { togglesConfig } from './toggles';\nimport { getStickyOffsetVars } from './utils/sticky-offsets';\nimport { TOOLS_DRAWER_ID, useDrawers } from './utils/use-drawers';\nimport { useFocusControl } from './utils/use-focus-control';\nimport { useSplitPanelFocusControl } from './utils/use-split-panel-focus-control';\nimport styles from './styles.css.js';\nimport testutilStyles from './test-classes/styles.css.js';\nconst ClassicAppLayout = React.forwardRef((_a, ref) => {\n  var _b, _c, _d, _e, _f, _g;\n  var {\n      navigation,\n      navigationWidth,\n      navigationHide,\n      navigationOpen,\n      tools,\n      toolsWidth,\n      toolsHide,\n      toolsOpen: controlledToolsOpen,\n      breadcrumbs,\n      notifications,\n      stickyNotifications,\n      contentHeader,\n      disableContentHeaderOverlap,\n      content,\n      contentType,\n      disableContentPaddings,\n      disableBodyScroll,\n      maxContentWidth,\n      minContentWidth,\n      placement,\n      ariaLabels,\n      splitPanel,\n      splitPanelSize: controlledSplitPanelSize,\n      splitPanelOpen: controlledSplitPanelOpen,\n      splitPanelPreferences: controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      onSplitPanelResize,\n      onSplitPanelToggle,\n      onNavigationChange,\n      onToolsChange,\n      drawers: controlledDrawers,\n      onDrawerChange,\n      activeDrawerId: controlledActiveDrawerId\n    } = _a,\n    rest = __rest(_a, [\"navigation\", \"navigationWidth\", \"navigationHide\", \"navigationOpen\", \"tools\", \"toolsWidth\", \"toolsHide\", \"toolsOpen\", \"breadcrumbs\", \"notifications\", \"stickyNotifications\", \"contentHeader\", \"disableContentHeaderOverlap\", \"content\", \"contentType\", \"disableContentPaddings\", \"disableBodyScroll\", \"maxContentWidth\", \"minContentWidth\", \"placement\", \"ariaLabels\", \"splitPanel\", \"splitPanelSize\", \"splitPanelOpen\", \"splitPanelPreferences\", \"onSplitPanelPreferencesChange\", \"onSplitPanelResize\", \"onSplitPanelToggle\", \"onNavigationChange\", \"onToolsChange\", \"drawers\", \"onDrawerChange\", \"activeDrawerId\"]);\n  // Private API for embedded view mode\n  const __embeddedViewMode = Boolean(rest.__embeddedViewMode);\n  const rootRef = useRef(null);\n  const isMobile = useMobile();\n  const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, false, {\n    componentName: 'AppLayout',\n    controlledProp: 'toolsOpen',\n    changeHandler: 'onToolsChange'\n  });\n  const onToolsToggle = open => {\n    setToolsOpen(open);\n    if (hasDrawers) {\n      focusDrawersButtons();\n    } else {\n      focusToolsButtons();\n    }\n    fireNonCancelableEvent(onToolsChange, {\n      open\n    });\n  };\n  const {\n    drawers,\n    activeDrawer,\n    minDrawerSize,\n    activeDrawerSize,\n    activeDrawerId,\n    ariaLabelsWithDrawers,\n    onActiveDrawerChange,\n    onActiveDrawerResize\n  } = useDrawers(Object.assign({\n    drawers: controlledDrawers,\n    onDrawerChange,\n    activeDrawerId: controlledActiveDrawerId\n  }, rest), ariaLabels, {\n    disableDrawersMerge: true,\n    ariaLabels,\n    tools,\n    toolsOpen,\n    toolsHide,\n    toolsWidth,\n    onToolsToggle\n  });\n  ariaLabels = ariaLabelsWithDrawers;\n  const hasDrawers = !!drawers;\n  const {\n    refs: navigationRefs,\n    setFocus: focusNavButtons\n  } = useFocusControl(navigationOpen);\n  const {\n    refs: toolsRefs,\n    setFocus: focusToolsButtons,\n    loseFocus: loseToolsFocus\n  } = useFocusControl(toolsOpen || activeDrawer !== undefined, true);\n  const {\n    refs: drawerRefs,\n    setFocus: focusDrawersButtons,\n    loseFocus: loseDrawersFocus\n  } = useFocusControl(!!activeDrawerId, true, activeDrawerId);\n  const onNavigationToggle = useStableCallback(open => {\n    focusNavButtons();\n    fireNonCancelableEvent(onNavigationChange, {\n      open\n    });\n  });\n  const onNavigationClick = event => {\n    const hasLink = findUpUntil(event.target, node => node.tagName === 'A' && !!node.href);\n    if (hasLink) {\n      onNavigationToggle(false);\n    }\n  };\n  useEffect(() => {\n    // Close navigation drawer on mobile so that the main content is visible\n    if (isMobile) {\n      onNavigationToggle(false);\n    }\n  }, [isMobile, onNavigationToggle]);\n  const navigationVisible = !navigationHide && navigationOpen;\n  const toolsVisible = !toolsHide && toolsOpen;\n  const [headerFooterHeight, setHeaderFooterHeight] = useState(0);\n  // Delay applying changes in header/footer height, as applying them immediately can cause\n  // ResizeOberver warnings due to the algorithm thinking that the change might have side-effects\n  // further up the tree, therefore blocking notifications to prevent loops\n  useEffect(() => {\n    const id = requestAnimationFrame(() => setHeaderFooterHeight(placement.insetBlockStart + placement.insetBlockEnd));\n    return () => cancelAnimationFrame(id);\n  }, [placement.insetBlockStart, placement.insetBlockEnd]);\n  const contentHeightStyle = {\n    [disableBodyScroll ? 'height' : 'minHeight']: `calc(100vh - ${headerFooterHeight}px)`\n  };\n  const [notificationsHeight, notificationsRef] = useContainerQuery(rect => rect.contentBoxHeight);\n  const anyPanelOpen = navigationVisible || toolsVisible || !!activeDrawer;\n  const hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;\n  const stickyNotificationsHeight = stickyNotifications ? notificationsHeight !== null && notificationsHeight !== void 0 ? notificationsHeight : 0 : 0;\n  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, undefined, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelPreferences',\n    changeHandler: 'onSplitPanelPreferencesChange'\n  });\n  const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(controlledSplitPanelOpen, onSplitPanelToggle, false, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelOpen',\n    changeHandler: 'onSplitPanelToggle'\n  });\n  const splitPanelPosition = (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) || 'bottom';\n  const [splitPanelReportedToggle, setSplitPanelReportedToggle] = useState({\n    displayed: false,\n    ariaLabel: undefined\n  });\n  const splitPanelDisplayed = !!(splitPanel && (splitPanelReportedToggle.displayed || splitPanelOpen));\n  const closedDrawerWidth = 40;\n  const effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;\n  const defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);\n  const [splitPanelSize = defaultSplitPanelSize, setSplitPanelSize] = useControllable(controlledSplitPanelSize, onSplitPanelResize, defaultSplitPanelSize, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelSize',\n    changeHandler: 'onSplitPanelResize'\n  });\n  const mainContentRef = useRef(null);\n  const legacyScrollRootRef = useRef(null);\n  const {\n    refs: splitPanelRefs,\n    setLastInteraction: setSplitPanelLastInteraction\n  } = useSplitPanelFocusControl([splitPanelPreferences, splitPanelOpen]);\n  const onSplitPanelPreferencesSet = useCallback(detail => {\n    setSplitPanelPreferences(detail);\n    setSplitPanelLastInteraction({\n      type: 'position'\n    });\n    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n  }, [setSplitPanelPreferences, onSplitPanelPreferencesChange, setSplitPanelLastInteraction]);\n  const onSplitPanelSizeSet = useCallback(newSize => {\n    setSplitPanelSize(newSize);\n    fireNonCancelableEvent(onSplitPanelResize, {\n      size: newSize\n    });\n  }, [setSplitPanelSize, onSplitPanelResize]);\n  const onSplitPanelToggleHandler = useCallback(() => {\n    setSplitPanelOpen(!splitPanelOpen);\n    setSplitPanelLastInteraction({\n      type: splitPanelOpen ? 'close' : 'open'\n    });\n    fireNonCancelableEvent(onSplitPanelToggle, {\n      open: !splitPanelOpen\n    });\n  }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle, setSplitPanelLastInteraction]);\n  const getSplitPanelMaxHeight = useStableCallback(() => {\n    if (typeof document === 'undefined') {\n      return 0; // render the split panel in its minimum possible size\n    } else if (disableBodyScroll && legacyScrollRootRef.current) {\n      const availableHeight = legacyScrollRootRef.current.clientHeight;\n      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n    } else {\n      const availableHeight = document.documentElement.clientHeight - placement.insetBlockStart - placement.insetBlockEnd;\n      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n    }\n  });\n  const rightDrawerBarWidth = drawers ? drawers.length > 1 ? closedDrawerWidth : 0 : 0;\n  const contentPadding = 80;\n  // all content except split-panel + drawers/tools area\n  const resizableSpaceAvailable = Math.max(0, placement.inlineSize - effectiveNavigationWidth - minContentWidth - contentPadding - rightDrawerBarWidth);\n  const getEffectiveToolsWidth = () => {\n    if (activeDrawerSize && activeDrawer) {\n      return Math.min(resizableSpaceAvailable, activeDrawerSize);\n    }\n    if (toolsHide || drawers) {\n      return 0;\n    }\n    if (toolsOpen) {\n      return toolsWidth;\n    }\n    return closedDrawerWidth;\n  };\n  const effectiveToolsWidth = getEffectiveToolsWidth();\n  // if there is no space to display split panel in the side, force to bottom\n  const isSplitPanelForcedPosition = isMobile || resizableSpaceAvailable - effectiveToolsWidth < SPLIT_PANEL_MIN_WIDTH;\n  const finalSplitPanePosition = isSplitPanelForcedPosition ? 'bottom' : splitPanelPosition;\n  const splitPaneAvailableOnTheSide = splitPanelDisplayed && finalSplitPanePosition === 'side';\n  const sideSplitPanelSize = splitPaneAvailableOnTheSide ? splitPanelOpen ? splitPanelSize : closedDrawerWidth : 0;\n  const sideSplitPanelMaxWidth = Math.max(0, resizableSpaceAvailable - effectiveToolsWidth);\n  const drawerMaxSize = Math.max(0, resizableSpaceAvailable - sideSplitPanelSize);\n  const navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;\n  const contentMaxWidthStyle = !isMobile ? {\n    maxWidth: maxContentWidth\n  } : undefined;\n  const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n  const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = useState(0);\n  const splitPanelContextProps = {\n    topOffset: placement.insetBlockStart + (finalSplitPanePosition === 'bottom' ? stickyNotificationsHeight : 0),\n    bottomOffset: placement.insetBlockEnd,\n    leftOffset: placement.insetInlineStart + (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),\n    rightOffset: isMobile ? 0 : placement.insetInlineEnd + effectiveToolsWidth + rightDrawerBarWidth,\n    position: finalSplitPanePosition,\n    size: splitPanelSize,\n    maxWidth: sideSplitPanelMaxWidth,\n    getMaxHeight: getSplitPanelMaxHeight,\n    disableContentPaddings,\n    contentWidthStyles: contentMaxWidthStyle,\n    isOpen: splitPanelOpen,\n    isForcedPosition: isSplitPanelForcedPosition,\n    onResize: onSplitPanelSizeSet,\n    onToggle: onSplitPanelToggleHandler,\n    onPreferencesChange: onSplitPanelPreferencesSet,\n    setSplitPanelToggle: setSplitPanelReportedToggle,\n    reportSize: setSplitPanelReportedSize,\n    reportHeaderHeight: setSplitPanelReportedHeaderHeight,\n    refs: splitPanelRefs\n  };\n  const splitPanelWrapped = splitPanel && React.createElement(SplitPanelProvider, Object.assign({}, splitPanelContextProps), finalSplitPanePosition === 'side' ? React.createElement(SideSplitPanelDrawer, {\n    displayed: splitPanelDisplayed\n  }, splitPanel) : splitPanel);\n  const contentWrapperProps = {\n    contentType,\n    navigationPadding: navigationHide || !!navigationOpen,\n    contentWidthStyles: !isMobile ? {\n      minWidth: minContentWidth,\n      maxWidth: maxContentWidth\n    } : undefined,\n    toolsPadding:\n    // tools padding is displayed in one of the three cases\n    // 1. Nothing on the that screen edge (no tools panel and no split panel)\n    toolsHide || hasDrawers && !activeDrawer && (!splitPanelDisplayed || finalSplitPanePosition !== 'side') ||\n    // 2. Tools panel is present and open\n    toolsVisible ||\n    // 3. Split panel is open in side position\n    splitPaneAvailableOnTheSide && splitPanelOpen,\n    isMobile\n  };\n  useImperativeHandle(ref, () => ({\n    openTools: () => onToolsToggle(true),\n    closeNavigationIfNecessary: () => {\n      if (isMobile) {\n        onNavigationToggle(false);\n      }\n    },\n    focusToolsClose: () => {\n      if (hasDrawers) {\n        focusDrawersButtons(true);\n      } else {\n        focusToolsButtons(true);\n      }\n    },\n    focusActiveDrawer: () => focusDrawersButtons(true),\n    focusSplitPanel: () => {\n      var _a;\n      return (_a = splitPanelRefs.slider.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }));\n  const splitPanelBottomOffset = (_b = !splitPanelDisplayed || finalSplitPanePosition !== 'bottom' ? undefined : splitPanelOpen ? splitPanelReportedSize : splitPanelReportedHeaderHeight) !== null && _b !== void 0 ? _b : undefined;\n  const [mobileBarHeight, mobileBarRef] = useContainerQuery(rect => rect.contentBoxHeight);\n  return React.createElement(\"div\", {\n    className: clsx(styles.root, testutilStyles.root, disableBodyScroll && styles['root-no-scroll']),\n    ref: rootRef,\n    style: contentHeightStyle\n  }, isMobile && !__embeddedViewMode && (!toolsHide || !navigationHide || breadcrumbs) && React.createElement(MobileToolbar, {\n    anyPanelOpen: anyPanelOpen,\n    toggleRefs: {\n      navigation: navigationRefs.toggle,\n      tools: toolsRefs.toggle\n    },\n    topOffset: placement.insetBlockStart,\n    ariaLabels: ariaLabels,\n    navigationHide: navigationHide,\n    toolsHide: toolsHide,\n    onNavigationOpen: () => onNavigationToggle(true),\n    onToolsOpen: () => onToolsToggle(true),\n    unfocusable: anyPanelOpen,\n    mobileBarRef: mobileBarRef,\n    drawers: drawers,\n    activeDrawerId: activeDrawerId,\n    onDrawerChange: newDrawerId => {\n      onActiveDrawerChange(newDrawerId);\n      if (newDrawerId !== activeDrawerId) {\n        focusToolsButtons();\n        focusDrawersButtons();\n      }\n    }\n  }, breadcrumbs), React.createElement(\"div\", {\n    className: clsx(styles.layout, disableBodyScroll && styles['layout-no-scroll'])\n  }, !navigationHide && React.createElement(Drawer, {\n    contentClassName: testutilStyles.navigation,\n    toggleClassName: testutilStyles['navigation-toggle'],\n    closeClassName: testutilStyles['navigation-close'],\n    ariaLabels: togglesConfig.navigation.getLabels(ariaLabels),\n    bottomOffset: placement.insetBlockEnd,\n    topOffset: placement.insetBlockStart,\n    isMobile: isMobile,\n    isOpen: navigationOpen,\n    onClick: isMobile ? onNavigationClick : undefined,\n    onToggle: onNavigationToggle,\n    toggleRefs: navigationRefs,\n    type: \"navigation\",\n    width: navigationWidth\n  }, navigation), React.createElement(\"main\", {\n    ref: legacyScrollRootRef,\n    className: clsx(styles['layout-main'], {\n      [styles['layout-main-scrollable']]: disableBodyScroll,\n      [testutilStyles['disable-body-scroll-root']]: disableBodyScroll,\n      [styles.unfocusable]: isMobile && anyPanelOpen\n    })\n  }, React.createElement(\"div\", {\n    style: {\n      marginBottom: splitPanelBottomOffset\n    }\n  }, notifications && React.createElement(Notifications, {\n    disableContentPaddings: disableContentPaddings,\n    testUtilsClassName: testutilStyles.notifications,\n    labels: ariaLabels,\n    topOffset: disableBodyScroll ? 0 : placement.insetBlockStart,\n    sticky: !isMobile && stickyNotifications,\n    ref: notificationsRef\n  }, notifications), (!isMobile && breadcrumbs || contentHeader) && React.createElement(ContentWrapper, Object.assign({}, contentWrapperProps), !isMobile && breadcrumbs && React.createElement(\"div\", {\n    className: clsx(testutilStyles.breadcrumbs, styles['breadcrumbs-desktop'])\n  }, breadcrumbs), contentHeader && React.createElement(\"div\", {\n    className: clsx(styles['content-header-wrapper'], !hasRenderedNotifications && (isMobile || !breadcrumbs) && styles['content-extra-top-padding'], !hasRenderedNotifications && !breadcrumbs && styles['content-header-wrapper-first-child'], !disableContentHeaderOverlap && styles['content-header-wrapper-overlapped'])\n  }, contentHeader)), React.createElement(ContentWrapper, Object.assign({}, contentWrapperProps, {\n    ref: mainContentRef,\n    disablePaddings: disableContentPaddings,\n    className: clsx(!disableContentPaddings && styles['content-wrapper'], !disableContentPaddings && (isMobile || !breadcrumbs) && !contentHeader && styles['content-extra-top-padding'], testutilStyles.content, !disableContentHeaderOverlap && contentHeader && styles['content-overlapped'], !hasRenderedNotifications && !breadcrumbs && !isMobile && !contentHeader && styles['content-wrapper-first-child']),\n    style: getStickyOffsetVars(placement.insetBlockStart, placement.insetBlockEnd + (splitPanelBottomOffset || 0), `${stickyNotificationsHeight}px`, mobileBarHeight && !disableBodyScroll ? `${mobileBarHeight}px` : '0px', !!disableBodyScroll, isMobile)\n  }), content)), finalSplitPanePosition === 'bottom' && splitPanelWrapped), finalSplitPanePosition === 'side' && splitPanelWrapped, hasDrawers ? React.createElement(ResizableDrawer, {\n    contentClassName: clsx(activeDrawerId && testutilStyles['active-drawer'], activeDrawerId === TOOLS_DRAWER_ID && testutilStyles.tools),\n    toggleClassName: testutilStyles['tools-toggle'],\n    closeClassName: clsx(testutilStyles['active-drawer-close-button'], activeDrawerId === TOOLS_DRAWER_ID && testutilStyles['tools-close']),\n    ariaLabels: {\n      openLabel: (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.triggerButton,\n      closeLabel: (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _d === void 0 ? void 0 : _d.closeButton,\n      mainLabel: (_e = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _e === void 0 ? void 0 : _e.drawerName,\n      resizeHandle: (_f = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _f === void 0 ? void 0 : _f.resizeHandle\n    },\n    minWidth: minDrawerSize,\n    maxWidth: drawerMaxSize,\n    width: activeDrawerSize,\n    bottomOffset: placement.insetBlockEnd,\n    topOffset: placement.insetBlockStart,\n    isMobile: isMobile,\n    onToggle: isOpen => {\n      if (!isOpen) {\n        focusToolsButtons();\n        focusDrawersButtons();\n        onActiveDrawerChange(null);\n      }\n    },\n    isOpen: true,\n    hideOpenButton: true,\n    toggleRefs: drawerRefs,\n    type: \"tools\",\n    onLoseFocus: loseDrawersFocus,\n    activeDrawer: activeDrawer,\n    onResize: changeDetail => onActiveDrawerResize(changeDetail),\n    refs: drawerRefs,\n    toolsContent: (_g = drawers === null || drawers === void 0 ? void 0 : drawers.find(drawer => drawer.id === TOOLS_DRAWER_ID)) === null || _g === void 0 ? void 0 : _g.content\n  }, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content) : !toolsHide && React.createElement(Drawer, {\n    contentClassName: testutilStyles.tools,\n    toggleClassName: testutilStyles['tools-toggle'],\n    closeClassName: testutilStyles['tools-close'],\n    ariaLabels: togglesConfig.tools.getLabels(ariaLabels),\n    width: toolsWidth,\n    bottomOffset: placement.insetBlockEnd,\n    topOffset: placement.insetBlockStart,\n    isMobile: isMobile,\n    onToggle: onToolsToggle,\n    isOpen: toolsOpen,\n    toggleRefs: toolsRefs,\n    type: \"tools\",\n    onLoseFocus: loseToolsFocus\n  }, tools), hasDrawers && drawers.length > 0 && React.createElement(DrawerTriggersBar, {\n    drawerRefs: drawerRefs,\n    bottomOffset: placement.insetBlockEnd,\n    topOffset: placement.insetBlockStart,\n    isMobile: isMobile,\n    drawers: drawers,\n    activeDrawerId: activeDrawerId,\n    onDrawerChange: newDrawerId => {\n      if (activeDrawerId !== newDrawerId) {\n        focusToolsButtons();\n        focusDrawersButtons();\n      }\n      onActiveDrawerChange(newDrawerId);\n    },\n    ariaLabels: ariaLabels\n  })));\n});\nexport default ClassicAppLayout;","map":{"version":3,"names":["React","useCallback","useEffect","useImperativeHandle","useRef","useState","clsx","useContainerQuery","useStableCallback","fireNonCancelableEvent","useControllable","useMobile","findUpUntil","CONSTRAINED_MAIN_PANEL_MIN_HEIGHT","CONSTRAINED_PAGE_HEIGHT","getSplitPanelDefaultSize","MAIN_PANEL_MIN_HEIGHT","ContentWrapper","Drawer","DrawerTriggersBar","ResizableDrawer","MobileToolbar","Notifications","SideSplitPanelDrawer","SPLIT_PANEL_MIN_WIDTH","SplitPanelProvider","togglesConfig","getStickyOffsetVars","TOOLS_DRAWER_ID","useDrawers","useFocusControl","useSplitPanelFocusControl","styles","testutilStyles","ClassicAppLayout","forwardRef","_a","ref","navigation","navigationWidth","navigationHide","navigationOpen","tools","toolsWidth","toolsHide","toolsOpen","controlledToolsOpen","breadcrumbs","notifications","stickyNotifications","contentHeader","disableContentHeaderOverlap","content","contentType","disableContentPaddings","disableBodyScroll","maxContentWidth","minContentWidth","placement","ariaLabels","splitPanel","splitPanelSize","controlledSplitPanelSize","splitPanelOpen","controlledSplitPanelOpen","splitPanelPreferences","controlledSplitPanelPreferences","onSplitPanelPreferencesChange","onSplitPanelResize","onSplitPanelToggle","onNavigationChange","onToolsChange","drawers","controlledDrawers","onDrawerChange","activeDrawerId","controlledActiveDrawerId","rest","__rest","__embeddedViewMode","Boolean","rootRef","isMobile","setToolsOpen","componentName","controlledProp","changeHandler","onToolsToggle","open","hasDrawers","focusDrawersButtons","focusToolsButtons","activeDrawer","minDrawerSize","activeDrawerSize","ariaLabelsWithDrawers","onActiveDrawerChange","onActiveDrawerResize","Object","assign","disableDrawersMerge","refs","navigationRefs","setFocus","focusNavButtons","toolsRefs","loseFocus","loseToolsFocus","undefined","drawerRefs","loseDrawersFocus","onNavigationToggle","onNavigationClick","event","hasLink","target","node","tagName","href","navigationVisible","toolsVisible","headerFooterHeight","setHeaderFooterHeight","id","requestAnimationFrame","insetBlockStart","insetBlockEnd","cancelAnimationFrame","contentHeightStyle","notificationsHeight","notificationsRef","rect","contentBoxHeight","anyPanelOpen","hasRenderedNotifications","stickyNotificationsHeight","setSplitPanelPreferences","setSplitPanelOpen","splitPanelPosition","position","splitPanelReportedToggle","setSplitPanelReportedToggle","displayed","ariaLabel","splitPanelDisplayed","closedDrawerWidth","effectiveNavigationWidth","defaultSplitPanelSize","setSplitPanelSize","mainContentRef","legacyScrollRootRef","splitPanelRefs","setLastInteraction","setSplitPanelLastInteraction","onSplitPanelPreferencesSet","detail","type","onSplitPanelSizeSet","newSize","size","onSplitPanelToggleHandler","getSplitPanelMaxHeight","document","current","availableHeight","clientHeight","documentElement","rightDrawerBarWidth","length","contentPadding","resizableSpaceAvailable","Math","max","inlineSize","getEffectiveToolsWidth","min","effectiveToolsWidth","isSplitPanelForcedPosition","finalSplitPanePosition","splitPaneAvailableOnTheSide","sideSplitPanelSize","sideSplitPanelMaxWidth","drawerMaxSize","navigationClosedWidth","contentMaxWidthStyle","maxWidth","splitPanelReportedSize","setSplitPanelReportedSize","splitPanelReportedHeaderHeight","setSplitPanelReportedHeaderHeight","splitPanelContextProps","topOffset","bottomOffset","leftOffset","insetInlineStart","rightOffset","insetInlineEnd","getMaxHeight","contentWidthStyles","isOpen","isForcedPosition","onResize","onToggle","onPreferencesChange","setSplitPanelToggle","reportSize","reportHeaderHeight","splitPanelWrapped","createElement","contentWrapperProps","navigationPadding","minWidth","toolsPadding","openTools","closeNavigationIfNecessary","focusToolsClose","focusActiveDrawer","focusSplitPanel","slider","focus","splitPanelBottomOffset","_b","mobileBarHeight","mobileBarRef","className","root","style","toggleRefs","toggle","onNavigationOpen","onToolsOpen","unfocusable","newDrawerId","layout","contentClassName","toggleClassName","closeClassName","getLabels","onClick","width","marginBottom","testUtilsClassName","labels","sticky","disablePaddings","openLabel","_c","triggerButton","closeLabel","_d","closeButton","mainLabel","_e","drawerName","resizeHandle","_f","hideOpenButton","onLoseFocus","changeDetail","toolsContent","_g","find","drawer"],"sources":["/home/jj/aws-threat-model-app/node_modules/src/app-layout/classic.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\n\nimport { SplitPanelSideToggleProps } from '../internal/context/split-panel-context';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { findUpUntil } from '../internal/utils/dom';\nimport {\n  CONSTRAINED_MAIN_PANEL_MIN_HEIGHT,\n  CONSTRAINED_PAGE_HEIGHT,\n  getSplitPanelDefaultSize,\n  MAIN_PANEL_MIN_HEIGHT,\n} from '../split-panel/utils/size-utils';\nimport ContentWrapper, { ContentWrapperProps } from './content-wrapper';\nimport { Drawer, DrawerTriggersBar } from './drawer';\nimport { ResizableDrawer } from './drawer/resizable-drawer';\nimport { AppLayoutProps, AppLayoutPropsWithDefaults } from './interfaces';\nimport { MobileToolbar } from './mobile-toolbar';\nimport { Notifications } from './notifications';\nimport {\n  SideSplitPanelDrawer,\n  SPLIT_PANEL_MIN_WIDTH,\n  SplitPanelProvider,\n  SplitPanelProviderProps,\n} from './split-panel';\nimport { togglesConfig } from './toggles';\nimport { getStickyOffsetVars } from './utils/sticky-offsets';\nimport { TOOLS_DRAWER_ID, useDrawers } from './utils/use-drawers';\nimport { useFocusControl } from './utils/use-focus-control';\nimport { useSplitPanelFocusControl } from './utils/use-split-panel-focus-control';\n\nimport styles from './styles.css.js';\nimport testutilStyles from './test-classes/styles.css.js';\n\nconst ClassicAppLayout = React.forwardRef(\n  (\n    {\n      navigation,\n      navigationWidth,\n      navigationHide,\n      navigationOpen,\n      tools,\n      toolsWidth,\n      toolsHide,\n      toolsOpen: controlledToolsOpen,\n      breadcrumbs,\n      notifications,\n      stickyNotifications,\n      contentHeader,\n      disableContentHeaderOverlap,\n      content,\n      contentType,\n      disableContentPaddings,\n      disableBodyScroll,\n      maxContentWidth,\n      minContentWidth,\n      placement,\n      ariaLabels,\n      splitPanel,\n      splitPanelSize: controlledSplitPanelSize,\n      splitPanelOpen: controlledSplitPanelOpen,\n      splitPanelPreferences: controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      onSplitPanelResize,\n      onSplitPanelToggle,\n      onNavigationChange,\n      onToolsChange,\n      drawers: controlledDrawers,\n      onDrawerChange,\n      activeDrawerId: controlledActiveDrawerId,\n      ...rest\n    }: AppLayoutPropsWithDefaults,\n    ref: React.Ref<AppLayoutProps.Ref>\n  ) => {\n    // Private API for embedded view mode\n    const __embeddedViewMode = Boolean((rest as any).__embeddedViewMode);\n\n    const rootRef = useRef<HTMLDivElement>(null);\n    const isMobile = useMobile();\n\n    const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, false, {\n      componentName: 'AppLayout',\n      controlledProp: 'toolsOpen',\n      changeHandler: 'onToolsChange',\n    });\n    const onToolsToggle = (open: boolean) => {\n      setToolsOpen(open);\n      if (hasDrawers) {\n        focusDrawersButtons();\n      } else {\n        focusToolsButtons();\n      }\n      fireNonCancelableEvent(onToolsChange, { open });\n    };\n\n    const {\n      drawers,\n      activeDrawer,\n      minDrawerSize,\n      activeDrawerSize,\n      activeDrawerId,\n      ariaLabelsWithDrawers,\n      onActiveDrawerChange,\n      onActiveDrawerResize,\n    } = useDrawers(\n      {\n        drawers: controlledDrawers,\n        onDrawerChange,\n        activeDrawerId: controlledActiveDrawerId,\n        ...rest,\n      },\n      ariaLabels,\n      {\n        disableDrawersMerge: true,\n        ariaLabels,\n        tools,\n        toolsOpen,\n        toolsHide,\n        toolsWidth,\n        onToolsToggle,\n      }\n    );\n    ariaLabels = ariaLabelsWithDrawers;\n    const hasDrawers = !!drawers;\n\n    const { refs: navigationRefs, setFocus: focusNavButtons } = useFocusControl(navigationOpen);\n    const {\n      refs: toolsRefs,\n      setFocus: focusToolsButtons,\n      loseFocus: loseToolsFocus,\n    } = useFocusControl(toolsOpen || activeDrawer !== undefined, true);\n    const {\n      refs: drawerRefs,\n      setFocus: focusDrawersButtons,\n      loseFocus: loseDrawersFocus,\n    } = useFocusControl(!!activeDrawerId, true, activeDrawerId);\n\n    const onNavigationToggle = useStableCallback((open: boolean) => {\n      focusNavButtons();\n      fireNonCancelableEvent(onNavigationChange, { open });\n    });\n\n    const onNavigationClick = (event: React.MouseEvent) => {\n      const hasLink = findUpUntil(\n        event.target as HTMLElement,\n        node => node.tagName === 'A' && !!(node as HTMLAnchorElement).href\n      );\n      if (hasLink) {\n        onNavigationToggle(false);\n      }\n    };\n\n    useEffect(() => {\n      // Close navigation drawer on mobile so that the main content is visible\n      if (isMobile) {\n        onNavigationToggle(false);\n      }\n    }, [isMobile, onNavigationToggle]);\n\n    const navigationVisible = !navigationHide && navigationOpen;\n    const toolsVisible = !toolsHide && toolsOpen;\n\n    const [headerFooterHeight, setHeaderFooterHeight] = useState(0);\n    // Delay applying changes in header/footer height, as applying them immediately can cause\n    // ResizeOberver warnings due to the algorithm thinking that the change might have side-effects\n    // further up the tree, therefore blocking notifications to prevent loops\n    useEffect(() => {\n      const id = requestAnimationFrame(() =>\n        setHeaderFooterHeight(placement.insetBlockStart + placement.insetBlockEnd)\n      );\n      return () => cancelAnimationFrame(id);\n    }, [placement.insetBlockStart, placement.insetBlockEnd]);\n    const contentHeightStyle = {\n      [disableBodyScroll ? 'height' : 'minHeight']: `calc(100vh - ${headerFooterHeight}px)`,\n    };\n\n    const [notificationsHeight, notificationsRef] = useContainerQuery(rect => rect.contentBoxHeight);\n    const anyPanelOpen = navigationVisible || toolsVisible || !!activeDrawer;\n    const hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;\n    const stickyNotificationsHeight = stickyNotifications ? notificationsHeight ?? 0 : 0;\n\n    const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(\n      controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      undefined,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelPreferences',\n        changeHandler: 'onSplitPanelPreferencesChange',\n      }\n    );\n    const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(\n      controlledSplitPanelOpen,\n      onSplitPanelToggle,\n      false,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelOpen',\n        changeHandler: 'onSplitPanelToggle',\n      }\n    );\n\n    const splitPanelPosition = splitPanelPreferences?.position || 'bottom';\n    const [splitPanelReportedToggle, setSplitPanelReportedToggle] = useState<SplitPanelSideToggleProps>({\n      displayed: false,\n      ariaLabel: undefined,\n    });\n    const splitPanelDisplayed = !!(splitPanel && (splitPanelReportedToggle.displayed || splitPanelOpen));\n\n    const closedDrawerWidth = 40;\n    const effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;\n\n    const defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);\n    const [splitPanelSize = defaultSplitPanelSize, setSplitPanelSize] = useControllable(\n      controlledSplitPanelSize,\n      onSplitPanelResize,\n      defaultSplitPanelSize,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelSize',\n        changeHandler: 'onSplitPanelResize',\n      }\n    );\n\n    const mainContentRef = useRef<HTMLDivElement>(null);\n    const legacyScrollRootRef = useRef<HTMLElement>(null);\n\n    const { refs: splitPanelRefs, setLastInteraction: setSplitPanelLastInteraction } = useSplitPanelFocusControl([\n      splitPanelPreferences,\n      splitPanelOpen,\n    ]);\n\n    const onSplitPanelPreferencesSet = useCallback(\n      (detail: { position: 'side' | 'bottom' }) => {\n        setSplitPanelPreferences(detail);\n        setSplitPanelLastInteraction({ type: 'position' });\n        fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n      },\n      [setSplitPanelPreferences, onSplitPanelPreferencesChange, setSplitPanelLastInteraction]\n    );\n    const onSplitPanelSizeSet = useCallback(\n      (newSize: number) => {\n        setSplitPanelSize(newSize);\n        fireNonCancelableEvent(onSplitPanelResize, { size: newSize });\n      },\n      [setSplitPanelSize, onSplitPanelResize]\n    );\n\n    const onSplitPanelToggleHandler = useCallback(() => {\n      setSplitPanelOpen(!splitPanelOpen);\n      setSplitPanelLastInteraction({ type: splitPanelOpen ? 'close' : 'open' });\n      fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });\n    }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle, setSplitPanelLastInteraction]);\n\n    const getSplitPanelMaxHeight = useStableCallback(() => {\n      if (typeof document === 'undefined') {\n        return 0; // render the split panel in its minimum possible size\n      } else if (disableBodyScroll && legacyScrollRootRef.current) {\n        const availableHeight = legacyScrollRootRef.current.clientHeight;\n        return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n      } else {\n        const availableHeight =\n          document.documentElement.clientHeight - placement.insetBlockStart - placement.insetBlockEnd;\n        return availableHeight < CONSTRAINED_PAGE_HEIGHT\n          ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT\n          : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n      }\n    });\n\n    const rightDrawerBarWidth = drawers ? (drawers.length > 1 ? closedDrawerWidth : 0) : 0;\n    const contentPadding = 80;\n    // all content except split-panel + drawers/tools area\n    const resizableSpaceAvailable = Math.max(\n      0,\n      placement.inlineSize - effectiveNavigationWidth - minContentWidth - contentPadding - rightDrawerBarWidth\n    );\n\n    const getEffectiveToolsWidth = () => {\n      if (activeDrawerSize && activeDrawer) {\n        return Math.min(resizableSpaceAvailable, activeDrawerSize);\n      }\n\n      if (toolsHide || drawers) {\n        return 0;\n      }\n\n      if (toolsOpen) {\n        return toolsWidth;\n      }\n\n      return closedDrawerWidth;\n    };\n\n    const effectiveToolsWidth = getEffectiveToolsWidth();\n\n    // if there is no space to display split panel in the side, force to bottom\n    const isSplitPanelForcedPosition =\n      isMobile || resizableSpaceAvailable - effectiveToolsWidth < SPLIT_PANEL_MIN_WIDTH;\n    const finalSplitPanePosition = isSplitPanelForcedPosition ? 'bottom' : splitPanelPosition;\n\n    const splitPaneAvailableOnTheSide = splitPanelDisplayed && finalSplitPanePosition === 'side';\n\n    const sideSplitPanelSize = splitPaneAvailableOnTheSide ? (splitPanelOpen ? splitPanelSize : closedDrawerWidth) : 0;\n    const sideSplitPanelMaxWidth = Math.max(0, resizableSpaceAvailable - effectiveToolsWidth);\n    const drawerMaxSize = Math.max(0, resizableSpaceAvailable - sideSplitPanelSize);\n\n    const navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;\n\n    const contentMaxWidthStyle = !isMobile ? { maxWidth: maxContentWidth } : undefined;\n\n    const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n    const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = useState(0);\n\n    const splitPanelContextProps: SplitPanelProviderProps = {\n      topOffset: placement.insetBlockStart + (finalSplitPanePosition === 'bottom' ? stickyNotificationsHeight : 0),\n      bottomOffset: placement.insetBlockEnd,\n      leftOffset:\n        placement.insetInlineStart +\n        (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),\n      rightOffset: isMobile ? 0 : placement.insetInlineEnd + effectiveToolsWidth + rightDrawerBarWidth,\n      position: finalSplitPanePosition,\n      size: splitPanelSize,\n      maxWidth: sideSplitPanelMaxWidth,\n      getMaxHeight: getSplitPanelMaxHeight,\n      disableContentPaddings,\n      contentWidthStyles: contentMaxWidthStyle,\n      isOpen: splitPanelOpen,\n      isForcedPosition: isSplitPanelForcedPosition,\n      onResize: onSplitPanelSizeSet,\n      onToggle: onSplitPanelToggleHandler,\n      onPreferencesChange: onSplitPanelPreferencesSet,\n      setSplitPanelToggle: setSplitPanelReportedToggle,\n      reportSize: setSplitPanelReportedSize,\n      reportHeaderHeight: setSplitPanelReportedHeaderHeight,\n      refs: splitPanelRefs,\n    };\n    const splitPanelWrapped = splitPanel && (\n      <SplitPanelProvider {...splitPanelContextProps}>\n        {finalSplitPanePosition === 'side' ? (\n          <SideSplitPanelDrawer displayed={splitPanelDisplayed}>{splitPanel}</SideSplitPanelDrawer>\n        ) : (\n          splitPanel\n        )}\n      </SplitPanelProvider>\n    );\n\n    const contentWrapperProps: ContentWrapperProps = {\n      contentType,\n      navigationPadding: navigationHide || !!navigationOpen,\n      contentWidthStyles: !isMobile ? { minWidth: minContentWidth, maxWidth: maxContentWidth } : undefined,\n      toolsPadding:\n        // tools padding is displayed in one of the three cases\n        // 1. Nothing on the that screen edge (no tools panel and no split panel)\n        toolsHide ||\n        (hasDrawers && !activeDrawer && (!splitPanelDisplayed || finalSplitPanePosition !== 'side')) ||\n        // 2. Tools panel is present and open\n        toolsVisible ||\n        // 3. Split panel is open in side position\n        (splitPaneAvailableOnTheSide && splitPanelOpen),\n      isMobile,\n    };\n\n    useImperativeHandle(ref, () => ({\n      openTools: () => onToolsToggle(true),\n      closeNavigationIfNecessary: () => {\n        if (isMobile) {\n          onNavigationToggle(false);\n        }\n      },\n      focusToolsClose: () => {\n        if (hasDrawers) {\n          focusDrawersButtons(true);\n        } else {\n          focusToolsButtons(true);\n        }\n      },\n      focusActiveDrawer: () => focusDrawersButtons(true),\n      focusSplitPanel: () => splitPanelRefs.slider.current?.focus(),\n    }));\n\n    const splitPanelBottomOffset =\n      (!splitPanelDisplayed || finalSplitPanePosition !== 'bottom'\n        ? undefined\n        : splitPanelOpen\n          ? splitPanelReportedSize\n          : splitPanelReportedHeaderHeight) ?? undefined;\n\n    const [mobileBarHeight, mobileBarRef] = useContainerQuery(rect => rect.contentBoxHeight);\n\n    return (\n      <div\n        className={clsx(styles.root, testutilStyles.root, disableBodyScroll && styles['root-no-scroll'])}\n        ref={rootRef}\n        style={contentHeightStyle}\n      >\n        {isMobile && !__embeddedViewMode && (!toolsHide || !navigationHide || breadcrumbs) && (\n          <MobileToolbar\n            anyPanelOpen={anyPanelOpen}\n            toggleRefs={{ navigation: navigationRefs.toggle, tools: toolsRefs.toggle }}\n            topOffset={placement.insetBlockStart}\n            ariaLabels={ariaLabels}\n            navigationHide={navigationHide}\n            toolsHide={toolsHide}\n            onNavigationOpen={() => onNavigationToggle(true)}\n            onToolsOpen={() => onToolsToggle(true)}\n            unfocusable={anyPanelOpen}\n            mobileBarRef={mobileBarRef}\n            drawers={drawers}\n            activeDrawerId={activeDrawerId}\n            onDrawerChange={newDrawerId => {\n              onActiveDrawerChange(newDrawerId);\n              if (newDrawerId !== activeDrawerId) {\n                focusToolsButtons();\n                focusDrawersButtons();\n              }\n            }}\n          >\n            {breadcrumbs}\n          </MobileToolbar>\n        )}\n        <div className={clsx(styles.layout, disableBodyScroll && styles['layout-no-scroll'])}>\n          {!navigationHide && (\n            <Drawer\n              contentClassName={testutilStyles.navigation}\n              toggleClassName={testutilStyles['navigation-toggle']}\n              closeClassName={testutilStyles['navigation-close']}\n              ariaLabels={togglesConfig.navigation.getLabels(ariaLabels)}\n              bottomOffset={placement.insetBlockEnd}\n              topOffset={placement.insetBlockStart}\n              isMobile={isMobile}\n              isOpen={navigationOpen}\n              onClick={isMobile ? onNavigationClick : undefined}\n              onToggle={onNavigationToggle}\n              toggleRefs={navigationRefs}\n              type=\"navigation\"\n              width={navigationWidth}\n            >\n              {navigation}\n            </Drawer>\n          )}\n          <main\n            ref={legacyScrollRootRef}\n            className={clsx(styles['layout-main'], {\n              [styles['layout-main-scrollable']]: disableBodyScroll,\n              [testutilStyles['disable-body-scroll-root']]: disableBodyScroll,\n              [styles.unfocusable]: isMobile && anyPanelOpen,\n            })}\n          >\n            <div\n              style={{\n                marginBottom: splitPanelBottomOffset,\n              }}\n            >\n              {notifications && (\n                <Notifications\n                  disableContentPaddings={disableContentPaddings}\n                  testUtilsClassName={testutilStyles.notifications}\n                  labels={ariaLabels}\n                  topOffset={disableBodyScroll ? 0 : placement.insetBlockStart}\n                  sticky={!isMobile && stickyNotifications}\n                  ref={notificationsRef}\n                >\n                  {notifications}\n                </Notifications>\n              )}\n              {((!isMobile && breadcrumbs) || contentHeader) && (\n                <ContentWrapper {...contentWrapperProps}>\n                  {!isMobile && breadcrumbs && (\n                    <div className={clsx(testutilStyles.breadcrumbs, styles['breadcrumbs-desktop'])}>{breadcrumbs}</div>\n                  )}\n                  {contentHeader && (\n                    <div\n                      className={clsx(\n                        styles['content-header-wrapper'],\n                        !hasRenderedNotifications && (isMobile || !breadcrumbs) && styles['content-extra-top-padding'],\n                        !hasRenderedNotifications && !breadcrumbs && styles['content-header-wrapper-first-child'],\n                        !disableContentHeaderOverlap && styles['content-header-wrapper-overlapped']\n                      )}\n                    >\n                      {contentHeader}\n                    </div>\n                  )}\n                </ContentWrapper>\n              )}\n              <ContentWrapper\n                {...contentWrapperProps}\n                ref={mainContentRef}\n                disablePaddings={disableContentPaddings}\n                className={clsx(\n                  !disableContentPaddings && styles['content-wrapper'],\n                  !disableContentPaddings &&\n                    (isMobile || !breadcrumbs) &&\n                    !contentHeader &&\n                    styles['content-extra-top-padding'],\n                  testutilStyles.content,\n                  !disableContentHeaderOverlap && contentHeader && styles['content-overlapped'],\n                  !hasRenderedNotifications &&\n                    !breadcrumbs &&\n                    !isMobile &&\n                    !contentHeader &&\n                    styles['content-wrapper-first-child']\n                )}\n                style={getStickyOffsetVars(\n                  placement.insetBlockStart,\n                  placement.insetBlockEnd + (splitPanelBottomOffset || 0),\n                  `${stickyNotificationsHeight}px`,\n                  mobileBarHeight && !disableBodyScroll ? `${mobileBarHeight}px` : '0px',\n                  !!disableBodyScroll,\n                  isMobile\n                )}\n              >\n                {content}\n              </ContentWrapper>\n            </div>\n            {finalSplitPanePosition === 'bottom' && splitPanelWrapped}\n          </main>\n\n          {finalSplitPanePosition === 'side' && splitPanelWrapped}\n\n          {hasDrawers ? (\n            <ResizableDrawer\n              contentClassName={clsx(\n                activeDrawerId && testutilStyles['active-drawer'],\n                activeDrawerId === TOOLS_DRAWER_ID && testutilStyles.tools\n              )}\n              toggleClassName={testutilStyles['tools-toggle']}\n              closeClassName={clsx(\n                testutilStyles['active-drawer-close-button'],\n                activeDrawerId === TOOLS_DRAWER_ID && testutilStyles['tools-close']\n              )}\n              ariaLabels={{\n                openLabel: activeDrawer?.ariaLabels?.triggerButton,\n                closeLabel: activeDrawer?.ariaLabels?.closeButton,\n                mainLabel: activeDrawer?.ariaLabels?.drawerName,\n                resizeHandle: activeDrawer?.ariaLabels?.resizeHandle,\n              }}\n              minWidth={minDrawerSize}\n              maxWidth={drawerMaxSize}\n              width={activeDrawerSize}\n              bottomOffset={placement.insetBlockEnd}\n              topOffset={placement.insetBlockStart}\n              isMobile={isMobile}\n              onToggle={isOpen => {\n                if (!isOpen) {\n                  focusToolsButtons();\n                  focusDrawersButtons();\n                  onActiveDrawerChange(null);\n                }\n              }}\n              isOpen={true}\n              hideOpenButton={true}\n              toggleRefs={drawerRefs}\n              type=\"tools\"\n              onLoseFocus={loseDrawersFocus}\n              activeDrawer={activeDrawer}\n              onResize={changeDetail => onActiveDrawerResize(changeDetail)}\n              refs={drawerRefs}\n              toolsContent={drawers?.find(drawer => drawer.id === TOOLS_DRAWER_ID)?.content}\n            >\n              {activeDrawer?.content}\n            </ResizableDrawer>\n          ) : (\n            !toolsHide && (\n              <Drawer\n                contentClassName={testutilStyles.tools}\n                toggleClassName={testutilStyles['tools-toggle']}\n                closeClassName={testutilStyles['tools-close']}\n                ariaLabels={togglesConfig.tools.getLabels(ariaLabels)}\n                width={toolsWidth}\n                bottomOffset={placement.insetBlockEnd}\n                topOffset={placement.insetBlockStart}\n                isMobile={isMobile}\n                onToggle={onToolsToggle}\n                isOpen={toolsOpen}\n                toggleRefs={toolsRefs}\n                type=\"tools\"\n                onLoseFocus={loseToolsFocus}\n              >\n                {tools}\n              </Drawer>\n            )\n          )}\n          {hasDrawers && drawers.length > 0 && (\n            <DrawerTriggersBar\n              drawerRefs={drawerRefs}\n              bottomOffset={placement.insetBlockEnd}\n              topOffset={placement.insetBlockStart}\n              isMobile={isMobile}\n              drawers={drawers}\n              activeDrawerId={activeDrawerId}\n              onDrawerChange={newDrawerId => {\n                if (activeDrawerId !== newDrawerId) {\n                  focusToolsButtons();\n                  focusDrawersButtons();\n                }\n                onActiveDrawerChange(newDrawerId);\n              }}\n              ariaLabels={ariaLabels}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default ClassicAppLayout;\n"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,EAAEC,mBAAmB,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC5F,OAAOC,IAAI,MAAM,MAAM;AAEvB,SAASC,iBAAiB,QAAQ,sCAAsC;AACxE,SAASC,iBAAiB,QAAQ,+CAA+C;AAGjF,SAASC,sBAAsB,QAAQ,oBAAoB;AAC3D,SAASC,eAAe,QAAQ,oCAAoC;AACpE,SAASC,SAAS,QAAQ,8BAA8B;AACxD,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SACEC,iCAAiC,EACjCC,uBAAuB,EACvBC,wBAAwB,EACxBC,qBAAqB,QAChB,iCAAiC;AACxC,OAAOC,cAAuC,MAAM,mBAAmB;AACvE,SAASC,MAAM,EAAEC,iBAAiB,QAAQ,UAAU;AACpD,SAASC,eAAe,QAAQ,2BAA2B;AAE3D,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SACEC,oBAAoB,EACpBC,qBAAqB,EACrBC,kBAAkB,QAEb,eAAe;AACtB,SAASC,aAAa,QAAQ,WAAW;AACzC,SAASC,mBAAmB,QAAQ,wBAAwB;AAC5D,SAASC,eAAe,EAAEC,UAAU,QAAQ,qBAAqB;AACjE,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,yBAAyB,QAAQ,uCAAuC;AAEjF,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,cAAc,MAAM,8BAA8B;AAEzD,MAAMC,gBAAgB,GAAGlC,KAAK,CAACmC,UAAU,CACvC,CACEC,EAmC6B,EAC7BC,GAAkC,KAChC;;MArCF;MACEC,UAAU;MACVC,eAAe;MACfC,cAAc;MACdC,cAAc;MACdC,KAAK;MACLC,UAAU;MACVC,SAAS;MACTC,SAAS,EAAEC,mBAAmB;MAC9BC,WAAW;MACXC,aAAa;MACbC,mBAAmB;MACnBC,aAAa;MACbC,2BAA2B;MAC3BC,OAAO;MACPC,WAAW;MACXC,sBAAsB;MACtBC,iBAAiB;MACjBC,eAAe;MACfC,eAAe;MACfC,SAAS;MACTC,UAAU;MACVC,UAAU;MACVC,cAAc,EAAEC,wBAAwB;MACxCC,cAAc,EAAEC,wBAAwB;MACxCC,qBAAqB,EAAEC,+BAA+B;MACtDC,6BAA6B;MAC7BC,kBAAkB;MAClBC,kBAAkB;MAClBC,kBAAkB;MAClBC,aAAa;MACbC,OAAO,EAAEC,iBAAiB;MAC1BC,cAAc;MACdC,cAAc,EAAEC;IAAwB,IAAAxC,EAEb;IADxByC,IAAI,GAAAC,MAAA,CAAA1C,EAAA,EAlCT,qlBAmCC,CADQ;EAIT;EACA,MAAM2C,kBAAkB,GAAGC,OAAO,CAAEH,IAAY,CAACE,kBAAkB,CAAC;EAEpE,MAAME,OAAO,GAAG7E,MAAM,CAAiB,IAAI,CAAC;EAC5C,MAAM8E,QAAQ,GAAGvE,SAAS,EAAE;EAE5B,MAAM,CAACkC,SAAS,GAAG,KAAK,EAAEsC,YAAY,CAAC,GAAGzE,eAAe,CAACoC,mBAAmB,EAAEyB,aAAa,EAAE,KAAK,EAAE;IACnGa,aAAa,EAAE,WAAW;IAC1BC,cAAc,EAAE,WAAW;IAC3BC,aAAa,EAAE;GAChB,CAAC;EACF,MAAMC,aAAa,GAAIC,IAAa,IAAI;IACtCL,YAAY,CAACK,IAAI,CAAC;IAClB,IAAIC,UAAU,EAAE;MACdC,mBAAmB,EAAE;KACtB,MAAM;MACLC,iBAAiB,EAAE;;IAErBlF,sBAAsB,CAAC8D,aAAa,EAAE;MAAEiB;IAAI,CAAE,CAAC;EACjD,CAAC;EAED,MAAM;IACJhB,OAAO;IACPoB,YAAY;IACZC,aAAa;IACbC,gBAAgB;IAChBnB,cAAc;IACdoB,qBAAqB;IACrBC,oBAAoB;IACpBC;EAAoB,CACrB,GAAGpE,UAAU,CAAAqE,MAAA,CAAAC,MAAA;IAEV3B,OAAO,EAAEC,iBAAiB;IAC1BC,cAAc;IACdC,cAAc,EAAEC;EAAwB,GACrCC,IAAI,GAETlB,UAAU,EACV;IACEyC,mBAAmB,EAAE,IAAI;IACzBzC,UAAU;IACVjB,KAAK;IACLG,SAAS;IACTD,SAAS;IACTD,UAAU;IACV4C;GACD,CACF;EACD5B,UAAU,GAAGoC,qBAAqB;EAClC,MAAMN,UAAU,GAAG,CAAC,CAACjB,OAAO;EAE5B,MAAM;IAAE6B,IAAI,EAAEC,cAAc;IAAEC,QAAQ,EAAEC;EAAe,CAAE,GAAG1E,eAAe,CAACW,cAAc,CAAC;EAC3F,MAAM;IACJ4D,IAAI,EAAEI,SAAS;IACfF,QAAQ,EAAEZ,iBAAiB;IAC3Be,SAAS,EAAEC;EAAc,CAC1B,GAAG7E,eAAe,CAACe,SAAS,IAAI+C,YAAY,KAAKgB,SAAS,EAAE,IAAI,CAAC;EAClE,MAAM;IACJP,IAAI,EAAEQ,UAAU;IAChBN,QAAQ,EAAEb,mBAAmB;IAC7BgB,SAAS,EAAEI;EAAgB,CAC5B,GAAGhF,eAAe,CAAC,CAAC,CAAC6C,cAAc,EAAE,IAAI,EAAEA,cAAc,CAAC;EAE3D,MAAMoC,kBAAkB,GAAGvG,iBAAiB,CAAEgF,IAAa,IAAI;IAC7DgB,eAAe,EAAE;IACjB/F,sBAAsB,CAAC6D,kBAAkB,EAAE;MAAEkB;IAAI,CAAE,CAAC;EACtD,CAAC,CAAC;EAEF,MAAMwB,iBAAiB,GAAIC,KAAuB,IAAI;IACpD,MAAMC,OAAO,GAAGtG,WAAW,CACzBqG,KAAK,CAACE,MAAqB,EAC3BC,IAAI,IAAIA,IAAI,CAACC,OAAO,KAAK,GAAG,IAAI,CAAC,CAAED,IAA0B,CAACE,IAAI,CACnE;IACD,IAAIJ,OAAO,EAAE;MACXH,kBAAkB,CAAC,KAAK,CAAC;;EAE7B,CAAC;EAED7G,SAAS,CAAC,MAAK;IACb;IACA,IAAIgF,QAAQ,EAAE;MACZ6B,kBAAkB,CAAC,KAAK,CAAC;;EAE7B,CAAC,EAAE,CAAC7B,QAAQ,EAAE6B,kBAAkB,CAAC,CAAC;EAElC,MAAMQ,iBAAiB,GAAG,CAAC/E,cAAc,IAAIC,cAAc;EAC3D,MAAM+E,YAAY,GAAG,CAAC5E,SAAS,IAAIC,SAAS;EAE5C,MAAM,CAAC4E,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGrH,QAAQ,CAAC,CAAC,CAAC;EAC/D;EACA;EACA;EACAH,SAAS,CAAC,MAAK;IACb,MAAMyH,EAAE,GAAGC,qBAAqB,CAAC,MAC/BF,qBAAqB,CAAChE,SAAS,CAACmE,eAAe,GAAGnE,SAAS,CAACoE,aAAa,CAAC,CAC3E;IACD,OAAO,MAAMC,oBAAoB,CAACJ,EAAE,CAAC;EACvC,CAAC,EAAE,CAACjE,SAAS,CAACmE,eAAe,EAAEnE,SAAS,CAACoE,aAAa,CAAC,CAAC;EACxD,MAAME,kBAAkB,GAAG;IACzB,CAACzE,iBAAiB,GAAG,QAAQ,GAAG,WAAW,GAAG,gBAAgBkE,kBAAkB;GACjF;EAED,MAAM,CAACQ,mBAAmB,EAAEC,gBAAgB,CAAC,GAAG3H,iBAAiB,CAAC4H,IAAI,IAAIA,IAAI,CAACC,gBAAgB,CAAC;EAChG,MAAMC,YAAY,GAAGd,iBAAiB,IAAIC,YAAY,IAAI,CAAC,CAAC5B,YAAY;EACxE,MAAM0C,wBAAwB,GAAGL,mBAAmB,GAAGA,mBAAmB,GAAG,CAAC,GAAG,KAAK;EACtF,MAAMM,yBAAyB,GAAGtF,mBAAmB,GAAGgF,mBAAmB,aAAnBA,mBAAmB,cAAnBA,mBAAmB,GAAI,CAAC,GAAG,CAAC;EAEpF,MAAM,CAAChE,qBAAqB,EAAEuE,wBAAwB,CAAC,GAAG9H,eAAe,CACvEwD,+BAA+B,EAC/BC,6BAA6B,EAC7ByC,SAAS,EACT;IACExB,aAAa,EAAE,WAAW;IAC1BC,cAAc,EAAE,uBAAuB;IACvCC,aAAa,EAAE;GAChB,CACF;EACD,MAAM,CAACvB,cAAc,GAAG,KAAK,EAAE0E,iBAAiB,CAAC,GAAG/H,eAAe,CACjEsD,wBAAwB,EACxBK,kBAAkB,EAClB,KAAK,EACL;IACEe,aAAa,EAAE,WAAW;IAC1BC,cAAc,EAAE,gBAAgB;IAChCC,aAAa,EAAE;GAChB,CACF;EAED,MAAMoD,kBAAkB,GAAG,CAAAzE,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAE0E,QAAQ,KAAI,QAAQ;EACtE,MAAM,CAACC,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGxI,QAAQ,CAA4B;IAClGyI,SAAS,EAAE,KAAK;IAChBC,SAAS,EAAEnC;GACZ,CAAC;EACF,MAAMoC,mBAAmB,GAAG,CAAC,EAAEpF,UAAU,KAAKgF,wBAAwB,CAACE,SAAS,IAAI/E,cAAc,CAAC,CAAC;EAEpG,MAAMkF,iBAAiB,GAAG,EAAE;EAC5B,MAAMC,wBAAwB,GAAG1G,cAAc,GAAG,CAAC,GAAGC,cAAc,GAAGF,eAAe,GAAG0G,iBAAiB;EAE1G,MAAME,qBAAqB,GAAGpI,wBAAwB,CAAC2H,kBAAkB,CAAC;EAC1E,MAAM,CAAC7E,cAAc,GAAGsF,qBAAqB,EAAEC,iBAAiB,CAAC,GAAG1I,eAAe,CACjFoD,wBAAwB,EACxBM,kBAAkB,EAClB+E,qBAAqB,EACrB;IACE/D,aAAa,EAAE,WAAW;IAC1BC,cAAc,EAAE,gBAAgB;IAChCC,aAAa,EAAE;GAChB,CACF;EAED,MAAM+D,cAAc,GAAGjJ,MAAM,CAAiB,IAAI,CAAC;EACnD,MAAMkJ,mBAAmB,GAAGlJ,MAAM,CAAc,IAAI,CAAC;EAErD,MAAM;IAAEiG,IAAI,EAAEkD,cAAc;IAAEC,kBAAkB,EAAEC;EAA4B,CAAE,GAAG1H,yBAAyB,CAAC,CAC3GkC,qBAAqB,EACrBF,cAAc,CACf,CAAC;EAEF,MAAM2F,0BAA0B,GAAGzJ,WAAW,CAC3C0J,MAAuC,IAAI;IAC1CnB,wBAAwB,CAACmB,MAAM,CAAC;IAChCF,4BAA4B,CAAC;MAAEG,IAAI,EAAE;IAAU,CAAE,CAAC;IAClDnJ,sBAAsB,CAAC0D,6BAA6B,EAAEwF,MAAM,CAAC;EAC/D,CAAC,EACD,CAACnB,wBAAwB,EAAErE,6BAA6B,EAAEsF,4BAA4B,CAAC,CACxF;EACD,MAAMI,mBAAmB,GAAG5J,WAAW,CACpC6J,OAAe,IAAI;IAClBV,iBAAiB,CAACU,OAAO,CAAC;IAC1BrJ,sBAAsB,CAAC2D,kBAAkB,EAAE;MAAE2F,IAAI,EAAED;IAAO,CAAE,CAAC;EAC/D,CAAC,EACD,CAACV,iBAAiB,EAAEhF,kBAAkB,CAAC,CACxC;EAED,MAAM4F,yBAAyB,GAAG/J,WAAW,CAAC,MAAK;IACjDwI,iBAAiB,CAAC,CAAC1E,cAAc,CAAC;IAClC0F,4BAA4B,CAAC;MAAEG,IAAI,EAAE7F,cAAc,GAAG,OAAO,GAAG;IAAM,CAAE,CAAC;IACzEtD,sBAAsB,CAAC4D,kBAAkB,EAAE;MAAEmB,IAAI,EAAE,CAACzB;IAAc,CAAE,CAAC;EACvE,CAAC,EAAE,CAAC0E,iBAAiB,EAAE1E,cAAc,EAAEM,kBAAkB,EAAEoF,4BAA4B,CAAC,CAAC;EAEzF,MAAMQ,sBAAsB,GAAGzJ,iBAAiB,CAAC,MAAK;IACpD,IAAI,OAAO0J,QAAQ,KAAK,WAAW,EAAE;MACnC,OAAO,CAAC,CAAC,CAAC;KACX,MAAM,IAAI3G,iBAAiB,IAAI+F,mBAAmB,CAACa,OAAO,EAAE;MAC3D,MAAMC,eAAe,GAAGd,mBAAmB,CAACa,OAAO,CAACE,YAAY;MAChE,OAAOD,eAAe,GAAGtJ,uBAAuB,GAAGsJ,eAAe,GAAGA,eAAe,GAAGpJ,qBAAqB;KAC7G,MAAM;MACL,MAAMoJ,eAAe,GACnBF,QAAQ,CAACI,eAAe,CAACD,YAAY,GAAG3G,SAAS,CAACmE,eAAe,GAAGnE,SAAS,CAACoE,aAAa;MAC7F,OAAOsC,eAAe,GAAGtJ,uBAAuB,GAC5CsJ,eAAe,GAAGvJ,iCAAiC,GACnDuJ,eAAe,GAAGpJ,qBAAqB;;EAE/C,CAAC,CAAC;EAEF,MAAMuJ,mBAAmB,GAAG/F,OAAO,GAAIA,OAAO,CAACgG,MAAM,GAAG,CAAC,GAAGvB,iBAAiB,GAAG,CAAC,GAAI,CAAC;EACtF,MAAMwB,cAAc,GAAG,EAAE;EACzB;EACA,MAAMC,uBAAuB,GAAGC,IAAI,CAACC,GAAG,CACtC,CAAC,EACDlH,SAAS,CAACmH,UAAU,GAAG3B,wBAAwB,GAAGzF,eAAe,GAAGgH,cAAc,GAAGF,mBAAmB,CACzG;EAED,MAAMO,sBAAsB,GAAGA,CAAA,KAAK;IAClC,IAAIhF,gBAAgB,IAAIF,YAAY,EAAE;MACpC,OAAO+E,IAAI,CAACI,GAAG,CAACL,uBAAuB,EAAE5E,gBAAgB,CAAC;;IAG5D,IAAIlD,SAAS,IAAI4B,OAAO,EAAE;MACxB,OAAO,CAAC;;IAGV,IAAI3B,SAAS,EAAE;MACb,OAAOF,UAAU;;IAGnB,OAAOsG,iBAAiB;EAC1B,CAAC;EAED,MAAM+B,mBAAmB,GAAGF,sBAAsB,EAAE;EAEpD;EACA,MAAMG,0BAA0B,GAC9B/F,QAAQ,IAAIwF,uBAAuB,GAAGM,mBAAmB,GAAGxJ,qBAAqB;EACnF,MAAM0J,sBAAsB,GAAGD,0BAA0B,GAAG,QAAQ,GAAGvC,kBAAkB;EAEzF,MAAMyC,2BAA2B,GAAGnC,mBAAmB,IAAIkC,sBAAsB,KAAK,MAAM;EAE5F,MAAME,kBAAkB,GAAGD,2BAA2B,GAAIpH,cAAc,GAAGF,cAAc,GAAGoF,iBAAiB,GAAI,CAAC;EAClH,MAAMoC,sBAAsB,GAAGV,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,uBAAuB,GAAGM,mBAAmB,CAAC;EACzF,MAAMM,aAAa,GAAGX,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,uBAAuB,GAAGU,kBAAkB,CAAC;EAE/E,MAAMG,qBAAqB,GAAG/I,cAAc,IAAI0C,QAAQ,GAAG,CAAC,GAAG+D,iBAAiB;EAEhF,MAAMuC,oBAAoB,GAAG,CAACtG,QAAQ,GAAG;IAAEuG,QAAQ,EAAEjI;EAAe,CAAE,GAAGoD,SAAS;EAElF,MAAM,CAAC8E,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGtL,QAAQ,CAAC,CAAC,CAAC;EACvE,MAAM,CAACuL,8BAA8B,EAAEC,iCAAiC,CAAC,GAAGxL,QAAQ,CAAC,CAAC,CAAC;EAEvF,MAAMyL,sBAAsB,GAA4B;IACtDC,SAAS,EAAErI,SAAS,CAACmE,eAAe,IAAIqD,sBAAsB,KAAK,QAAQ,GAAG3C,yBAAyB,GAAG,CAAC,CAAC;IAC5GyD,YAAY,EAAEtI,SAAS,CAACoE,aAAa;IACrCmE,UAAU,EACRvI,SAAS,CAACwI,gBAAgB,IACzBhH,QAAQ,GAAG,CAAC,GAAG,CAAC1C,cAAc,IAAIC,cAAc,GAAGF,eAAe,GAAGgJ,qBAAqB,CAAC;IAC9FY,WAAW,EAAEjH,QAAQ,GAAG,CAAC,GAAGxB,SAAS,CAAC0I,cAAc,GAAGpB,mBAAmB,GAAGT,mBAAmB;IAChG5B,QAAQ,EAAEuC,sBAAsB;IAChCnB,IAAI,EAAElG,cAAc;IACpB4H,QAAQ,EAAEJ,sBAAsB;IAChCgB,YAAY,EAAEpC,sBAAsB;IACpC3G,sBAAsB;IACtBgJ,kBAAkB,EAAEd,oBAAoB;IACxCe,MAAM,EAAExI,cAAc;IACtByI,gBAAgB,EAAEvB,0BAA0B;IAC5CwB,QAAQ,EAAE5C,mBAAmB;IAC7B6C,QAAQ,EAAE1C,yBAAyB;IACnC2C,mBAAmB,EAAEjD,0BAA0B;IAC/CkD,mBAAmB,EAAE/D,2BAA2B;IAChDgE,UAAU,EAAElB,yBAAyB;IACrCmB,kBAAkB,EAAEjB,iCAAiC;IACrDxF,IAAI,EAAEkD;GACP;EACD,MAAMwD,iBAAiB,GAAGnJ,UAAU,IAClC5D,KAAA,CAAAgN,aAAA,CAACvL,kBAAkB,EAAAyE,MAAA,CAAAC,MAAA,KAAK2F,sBAAsB,GAC3CZ,sBAAsB,KAAK,MAAM,GAChClL,KAAA,CAAAgN,aAAA,CAACzL,oBAAoB;IAACuH,SAAS,EAAEE;EAAmB,GAAGpF,UAAU,CAAwB,GAEzFA,UACD,CAEJ;EAED,MAAMqJ,mBAAmB,GAAwB;IAC/C5J,WAAW;IACX6J,iBAAiB,EAAE1K,cAAc,IAAI,CAAC,CAACC,cAAc;IACrD6J,kBAAkB,EAAE,CAACpH,QAAQ,GAAG;MAAEiI,QAAQ,EAAE1J,eAAe;MAAEgI,QAAQ,EAAEjI;IAAe,CAAE,GAAGoD,SAAS;IACpGwG,YAAY;IACV;IACA;IACAxK,SAAS,IACR6C,UAAU,IAAI,CAACG,YAAY,KAAK,CAACoD,mBAAmB,IAAIkC,sBAAsB,KAAK,MAAM,CAAE;IAC5F;IACA1D,YAAY;IACZ;IACC2D,2BAA2B,IAAIpH,cAAe;IACjDmB;GACD;EAED/E,mBAAmB,CAACkC,GAAG,EAAE,OAAO;IAC9BgL,SAAS,EAAEA,CAAA,KAAM9H,aAAa,CAAC,IAAI,CAAC;IACpC+H,0BAA0B,EAAEA,CAAA,KAAK;MAC/B,IAAIpI,QAAQ,EAAE;QACZ6B,kBAAkB,CAAC,KAAK,CAAC;;IAE7B,CAAC;IACDwG,eAAe,EAAEA,CAAA,KAAK;MACpB,IAAI9H,UAAU,EAAE;QACdC,mBAAmB,CAAC,IAAI,CAAC;OAC1B,MAAM;QACLC,iBAAiB,CAAC,IAAI,CAAC;;IAE3B,CAAC;IACD6H,iBAAiB,EAAEA,CAAA,KAAM9H,mBAAmB,CAAC,IAAI,CAAC;IAClD+H,eAAe,EAAEA,CAAA,KAAK;MAAA,IAAArL,EAAA;MAAC,QAAAA,EAAA,GAAAmH,cAAc,CAACmE,MAAM,CAACvD,OAAO,cAAA/H,EAAA,uBAAAA,EAAA,CAAEuL,KAAK,EAAE;IAAA;GAC9D,CAAC,CAAC;EAEH,MAAMC,sBAAsB,GAC1B,CAAAC,EAAA,GAAC,CAAC7E,mBAAmB,IAAIkC,sBAAsB,KAAK,QAAQ,GACxDtE,SAAS,GACT7C,cAAc,GACZ2H,sBAAsB,GACtBE,8BAA+B,cAAAiC,EAAA,cAAAA,EAAA,GAAIjH,SAAS;EAEpD,MAAM,CAACkH,eAAe,EAAEC,YAAY,CAAC,GAAGxN,iBAAiB,CAAC4H,IAAI,IAAIA,IAAI,CAACC,gBAAgB,CAAC;EAExF,OACEpI,KAAA,CAAAgN,aAAA;IACEgB,SAAS,EAAE1N,IAAI,CAAC0B,MAAM,CAACiM,IAAI,EAAEhM,cAAc,CAACgM,IAAI,EAAE1K,iBAAiB,IAAIvB,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAChGK,GAAG,EAAE4C,OAAO;IACZiJ,KAAK,EAAElG;EAAkB,GAExB9C,QAAQ,IAAI,CAACH,kBAAkB,KAAK,CAACnC,SAAS,IAAI,CAACJ,cAAc,IAAIO,WAAW,CAAC,IAChF/C,KAAA,CAAAgN,aAAA,CAAC3L,aAAa;IACZgH,YAAY,EAAEA,YAAY;IAC1B8F,UAAU,EAAE;MAAE7L,UAAU,EAAEgE,cAAc,CAAC8H,MAAM;MAAE1L,KAAK,EAAE+D,SAAS,CAAC2H;IAAM,CAAE;IAC1ErC,SAAS,EAAErI,SAAS,CAACmE,eAAe;IACpClE,UAAU,EAAEA,UAAU;IACtBnB,cAAc,EAAEA,cAAc;IAC9BI,SAAS,EAAEA,SAAS;IACpByL,gBAAgB,EAAEA,CAAA,KAAMtH,kBAAkB,CAAC,IAAI,CAAC;IAChDuH,WAAW,EAAEA,CAAA,KAAM/I,aAAa,CAAC,IAAI,CAAC;IACtCgJ,WAAW,EAAElG,YAAY;IACzB0F,YAAY,EAAEA,YAAY;IAC1BvJ,OAAO,EAAEA,OAAO;IAChBG,cAAc,EAAEA,cAAc;IAC9BD,cAAc,EAAE8J,WAAW,IAAG;MAC5BxI,oBAAoB,CAACwI,WAAW,CAAC;MACjC,IAAIA,WAAW,KAAK7J,cAAc,EAAE;QAClCgB,iBAAiB,EAAE;QACnBD,mBAAmB,EAAE;;IAEzB;EAAC,GAEA3C,WAAW,CAEf,EACD/C,KAAA,CAAAgN,aAAA;IAAKgB,SAAS,EAAE1N,IAAI,CAAC0B,MAAM,CAACyM,MAAM,EAAElL,iBAAiB,IAAIvB,MAAM,CAAC,kBAAkB,CAAC;EAAC,GACjF,CAACQ,cAAc,IACdxC,KAAA,CAAAgN,aAAA,CAAC9L,MAAM;IACLwN,gBAAgB,EAAEzM,cAAc,CAACK,UAAU;IAC3CqM,eAAe,EAAE1M,cAAc,CAAC,mBAAmB,CAAC;IACpD2M,cAAc,EAAE3M,cAAc,CAAC,kBAAkB,CAAC;IAClD0B,UAAU,EAAEjC,aAAa,CAACY,UAAU,CAACuM,SAAS,CAAClL,UAAU,CAAC;IAC1DqI,YAAY,EAAEtI,SAAS,CAACoE,aAAa;IACrCiE,SAAS,EAAErI,SAAS,CAACmE,eAAe;IACpC3C,QAAQ,EAAEA,QAAQ;IAClBqH,MAAM,EAAE9J,cAAc;IACtBqM,OAAO,EAAE5J,QAAQ,GAAG8B,iBAAiB,GAAGJ,SAAS;IACjD8F,QAAQ,EAAE3F,kBAAkB;IAC5BoH,UAAU,EAAE7H,cAAc;IAC1BsD,IAAI,EAAC,YAAY;IACjBmF,KAAK,EAAExM;EAAe,GAErBD,UAAU,CAEd,EACDtC,KAAA,CAAAgN,aAAA;IACE3K,GAAG,EAAEiH,mBAAmB;IACxB0E,SAAS,EAAE1N,IAAI,CAAC0B,MAAM,CAAC,aAAa,CAAC,EAAE;MACrC,CAACA,MAAM,CAAC,wBAAwB,CAAC,GAAGuB,iBAAiB;MACrD,CAACtB,cAAc,CAAC,0BAA0B,CAAC,GAAGsB,iBAAiB;MAC/D,CAACvB,MAAM,CAACuM,WAAW,GAAGrJ,QAAQ,IAAImD;KACnC;EAAC,GAEFrI,KAAA,CAAAgN,aAAA;IACEkB,KAAK,EAAE;MACLc,YAAY,EAAEpB;;EACf,GAEA5K,aAAa,IACZhD,KAAA,CAAAgN,aAAA,CAAC1L,aAAa;IACZgC,sBAAsB,EAAEA,sBAAsB;IAC9C2L,kBAAkB,EAAEhN,cAAc,CAACe,aAAa;IAChDkM,MAAM,EAAEvL,UAAU;IAClBoI,SAAS,EAAExI,iBAAiB,GAAG,CAAC,GAAGG,SAAS,CAACmE,eAAe;IAC5DsH,MAAM,EAAE,CAACjK,QAAQ,IAAIjC,mBAAmB;IACxCZ,GAAG,EAAE6F;EAAgB,GAEpBlF,aAAa,CAEjB,EACA,CAAE,CAACkC,QAAQ,IAAInC,WAAW,IAAKG,aAAa,KAC3ClD,KAAA,CAAAgN,aAAA,CAAC/L,cAAc,EAAAiF,MAAA,CAAAC,MAAA,KAAK8G,mBAAmB,GACpC,CAAC/H,QAAQ,IAAInC,WAAW,IACvB/C,KAAA,CAAAgN,aAAA;IAAKgB,SAAS,EAAE1N,IAAI,CAAC2B,cAAc,CAACc,WAAW,EAAEf,MAAM,CAAC,qBAAqB,CAAC;EAAC,GAAGe,WAAW,CAC9F,EACAG,aAAa,IACZlD,KAAA,CAAAgN,aAAA;IACEgB,SAAS,EAAE1N,IAAI,CACb0B,MAAM,CAAC,wBAAwB,CAAC,EAChC,CAACsG,wBAAwB,KAAKpD,QAAQ,IAAI,CAACnC,WAAW,CAAC,IAAIf,MAAM,CAAC,2BAA2B,CAAC,EAC9F,CAACsG,wBAAwB,IAAI,CAACvF,WAAW,IAAIf,MAAM,CAAC,oCAAoC,CAAC,EACzF,CAACmB,2BAA2B,IAAInB,MAAM,CAAC,mCAAmC,CAAC;EAC5E,GAEAkB,aAAa,CAEjB,CAEJ,EACDlD,KAAA,CAAAgN,aAAA,CAAC/L,cAAc,EAAAiF,MAAA,CAAAC,MAAA,KACT8G,mBAAmB;IACvB5K,GAAG,EAAEgH,cAAc;IACnB+F,eAAe,EAAE9L,sBAAsB;IACvC0K,SAAS,EAAE1N,IAAI,CACb,CAACgD,sBAAsB,IAAItB,MAAM,CAAC,iBAAiB,CAAC,EACpD,CAACsB,sBAAsB,KACpB4B,QAAQ,IAAI,CAACnC,WAAW,CAAC,IAC1B,CAACG,aAAa,IACdlB,MAAM,CAAC,2BAA2B,CAAC,EACrCC,cAAc,CAACmB,OAAO,EACtB,CAACD,2BAA2B,IAAID,aAAa,IAAIlB,MAAM,CAAC,oBAAoB,CAAC,EAC7E,CAACsG,wBAAwB,IACvB,CAACvF,WAAW,IACZ,CAACmC,QAAQ,IACT,CAAChC,aAAa,IACdlB,MAAM,CAAC,6BAA6B,CAAC,CACxC;IACDkM,KAAK,EAAEvM,mBAAmB,CACxB+B,SAAS,CAACmE,eAAe,EACzBnE,SAAS,CAACoE,aAAa,IAAI8F,sBAAsB,IAAI,CAAC,CAAC,EACvD,GAAGrF,yBAAyB,IAAI,EAChCuF,eAAe,IAAI,CAACvK,iBAAiB,GAAG,GAAGuK,eAAe,IAAI,GAAG,KAAK,EACtE,CAAC,CAACvK,iBAAiB,EACnB2B,QAAQ;EACT,IAEA9B,OAAO,CACO,CACb,EACL8H,sBAAsB,KAAK,QAAQ,IAAI6B,iBAAiB,CACpD,EAEN7B,sBAAsB,KAAK,MAAM,IAAI6B,iBAAiB,EAEtDtH,UAAU,GACTzF,KAAA,CAAAgN,aAAA,CAAC5L,eAAe;IACdsN,gBAAgB,EAAEpO,IAAI,CACpBqE,cAAc,IAAI1C,cAAc,CAAC,eAAe,CAAC,EACjD0C,cAAc,KAAK/C,eAAe,IAAIK,cAAc,CAACS,KAAK,CAC3D;IACDiM,eAAe,EAAE1M,cAAc,CAAC,cAAc,CAAC;IAC/C2M,cAAc,EAAEtO,IAAI,CAClB2B,cAAc,CAAC,4BAA4B,CAAC,EAC5C0C,cAAc,KAAK/C,eAAe,IAAIK,cAAc,CAAC,aAAa,CAAC,CACpE;IACD0B,UAAU,EAAE;MACV0L,SAAS,EAAE,CAAAC,EAAA,GAAA1J,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEjC,UAAU,cAAA2L,EAAA,uBAAAA,EAAA,CAAEC,aAAa;MAClDC,UAAU,EAAE,CAAAC,EAAA,GAAA7J,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEjC,UAAU,cAAA8L,EAAA,uBAAAA,EAAA,CAAEC,WAAW;MACjDC,SAAS,EAAE,CAAAC,EAAA,GAAAhK,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEjC,UAAU,cAAAiM,EAAA,uBAAAA,EAAA,CAAEC,UAAU;MAC/CC,YAAY,EAAE,CAAAC,EAAA,GAAAnK,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEjC,UAAU,cAAAoM,EAAA,uBAAAA,EAAA,CAAED;KACzC;IACD3C,QAAQ,EAAEtH,aAAa;IACvB4F,QAAQ,EAAEH,aAAa;IACvByD,KAAK,EAAEjJ,gBAAgB;IACvBkG,YAAY,EAAEtI,SAAS,CAACoE,aAAa;IACrCiE,SAAS,EAAErI,SAAS,CAACmE,eAAe;IACpC3C,QAAQ,EAAEA,QAAQ;IAClBwH,QAAQ,EAAEH,MAAM,IAAG;MACjB,IAAI,CAACA,MAAM,EAAE;QACX5G,iBAAiB,EAAE;QACnBD,mBAAmB,EAAE;QACrBM,oBAAoB,CAAC,IAAI,CAAC;;IAE9B,CAAC;IACDuG,MAAM,EAAE,IAAI;IACZyD,cAAc,EAAE,IAAI;IACpB7B,UAAU,EAAEtH,UAAU;IACtB+C,IAAI,EAAC,OAAO;IACZqG,WAAW,EAAEnJ,gBAAgB;IAC7BlB,YAAY,EAAEA,YAAY;IAC1B6G,QAAQ,EAAEyD,YAAY,IAAIjK,oBAAoB,CAACiK,YAAY,CAAC;IAC5D7J,IAAI,EAAEQ,UAAU;IAChBsJ,YAAY,EAAE,CAAAC,EAAA,GAAA5L,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE6L,IAAI,CAACC,MAAM,IAAIA,MAAM,CAAC3I,EAAE,KAAK/F,eAAe,CAAC,cAAAwO,EAAA,uBAAAA,EAAA,CAAEhN;EAAO,GAE5EwC,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAExC,OAAO,CACN,GAElB,CAACR,SAAS,IACR5C,KAAA,CAAAgN,aAAA,CAAC9L,MAAM;IACLwN,gBAAgB,EAAEzM,cAAc,CAACS,KAAK;IACtCiM,eAAe,EAAE1M,cAAc,CAAC,cAAc,CAAC;IAC/C2M,cAAc,EAAE3M,cAAc,CAAC,aAAa,CAAC;IAC7C0B,UAAU,EAAEjC,aAAa,CAACgB,KAAK,CAACmM,SAAS,CAAClL,UAAU,CAAC;IACrDoL,KAAK,EAAEpM,UAAU;IACjBqJ,YAAY,EAAEtI,SAAS,CAACoE,aAAa;IACrCiE,SAAS,EAAErI,SAAS,CAACmE,eAAe;IACpC3C,QAAQ,EAAEA,QAAQ;IAClBwH,QAAQ,EAAEnH,aAAa;IACvBgH,MAAM,EAAE1J,SAAS;IACjBsL,UAAU,EAAE1H,SAAS;IACrBmD,IAAI,EAAC,OAAO;IACZqG,WAAW,EAAEtJ;EAAc,GAE1BjE,KAAK,CAGX,EACA+C,UAAU,IAAIjB,OAAO,CAACgG,MAAM,GAAG,CAAC,IAC/BxK,KAAA,CAAAgN,aAAA,CAAC7L,iBAAiB;IAChB0F,UAAU,EAAEA,UAAU;IACtBmF,YAAY,EAAEtI,SAAS,CAACoE,aAAa;IACrCiE,SAAS,EAAErI,SAAS,CAACmE,eAAe;IACpC3C,QAAQ,EAAEA,QAAQ;IAClBV,OAAO,EAAEA,OAAO;IAChBG,cAAc,EAAEA,cAAc;IAC9BD,cAAc,EAAE8J,WAAW,IAAG;MAC5B,IAAI7J,cAAc,KAAK6J,WAAW,EAAE;QAClC7I,iBAAiB,EAAE;QACnBD,mBAAmB,EAAE;;MAEvBM,oBAAoB,CAACwI,WAAW,CAAC;IACnC,CAAC;IACD7K,UAAU,EAAEA;EAAU,EAEzB,CACG,CACF;AAEV,CAAC,CACF;AAED,eAAezB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}