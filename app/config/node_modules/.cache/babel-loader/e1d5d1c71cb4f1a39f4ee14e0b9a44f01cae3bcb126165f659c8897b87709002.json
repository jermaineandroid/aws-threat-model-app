{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport Icon from '../../../../icon/internal';\nimport styles from './styles.css.js';\nfunction TriggerButton(_ref, ref) {\n  let {\n    ariaLabel,\n    className,\n    iconName,\n    iconSvg,\n    ariaExpanded,\n    ariaControls,\n    onClick,\n    testId,\n    disabled = false,\n    badge,\n    selected = false,\n    highContrastHeader\n  } = _ref;\n  return React.createElement(\"div\", {\n    className: clsx(styles['trigger-wrapper'], !highContrastHeader && styles['remove-high-contrast-header'])\n  }, React.createElement(\"button\", {\n    \"aria-expanded\": ariaExpanded,\n    \"aria-controls\": ariaControls,\n    \"aria-haspopup\": true,\n    \"aria-label\": ariaLabel,\n    \"aria-disabled\": disabled,\n    disabled: disabled,\n    className: clsx(styles.trigger, {\n      [styles.selected]: selected,\n      [styles.badge]: badge\n    }, className),\n    onClick: onClick,\n    ref: ref,\n    type: \"button\",\n    \"data-testid\": testId\n  }, React.createElement(\"span\", {\n    className: clsx(badge && styles['trigger-badge-wrapper'])\n  }, (iconName || iconSvg) && React.createElement(Icon, {\n    name: iconName,\n    svg: iconSvg\n  }))), badge && React.createElement(\"div\", {\n    className: styles.dot\n  }));\n}\nexport default React.forwardRef(TriggerButton);","map":{"version":3,"names":["React","clsx","Icon","styles","TriggerButton","_ref","ref","ariaLabel","className","iconName","iconSvg","ariaExpanded","ariaControls","onClick","testId","disabled","badge","selected","highContrastHeader","createElement","trigger","type","name","svg","dot","forwardRef"],"sources":["/home/jj/aws-threat-model-app/node_modules/src/app-layout/visual-refresh-toolbar/toolbar/trigger-button/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { Ref } from 'react';\nimport clsx from 'clsx';\n\nimport { ButtonProps } from '../../../../button/interfaces';\nimport { IconProps } from '../../../../icon/interfaces';\nimport Icon from '../../../../icon/internal';\n\nimport styles from './styles.css.js';\n\nexport interface TriggerButtonProps {\n  ariaLabel?: string;\n  className?: string;\n  iconName?: IconProps.Name;\n  iconSvg?: React.ReactNode;\n  ariaExpanded: boolean | undefined;\n  ariaControls?: string;\n  disabled?: boolean;\n  /**\n   * Ovewrwrites any internal testIds when provided\n   */\n  testId?: string;\n  /**\n   * If button is selected. Used only for desktop and applies a selected class\n   */\n  selected?: boolean;\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\n  badge?: boolean;\n  highContrastHeader?: boolean;\n}\n\nfunction TriggerButton(\n  {\n    ariaLabel,\n    className,\n    iconName,\n    iconSvg,\n    ariaExpanded,\n    ariaControls,\n    onClick,\n    testId,\n    disabled = false,\n    badge,\n    selected = false,\n    highContrastHeader,\n  }: TriggerButtonProps,\n  ref: React.Ref<ButtonProps.Ref>\n) {\n  return (\n    <div className={clsx(styles['trigger-wrapper'], !highContrastHeader && styles['remove-high-contrast-header'])}>\n      <button\n        aria-expanded={ariaExpanded}\n        aria-controls={ariaControls}\n        aria-haspopup={true}\n        aria-label={ariaLabel}\n        aria-disabled={disabled}\n        disabled={disabled}\n        className={clsx(\n          styles.trigger,\n          {\n            [styles.selected]: selected,\n            [styles.badge]: badge,\n          },\n          className\n        )}\n        onClick={onClick}\n        ref={ref as Ref<HTMLButtonElement>}\n        type=\"button\"\n        data-testid={testId}\n      >\n        <span className={clsx(badge && styles['trigger-badge-wrapper'])}>\n          {(iconName || iconSvg) && <Icon name={iconName} svg={iconSvg} />}\n        </span>\n      </button>\n      {badge && <div className={styles.dot} />}\n    </div>\n  );\n}\n\nexport default React.forwardRef(TriggerButton);\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAc,MAAM,OAAO;AAClC,OAAOC,IAAI,MAAM,MAAM;AAIvB,OAAOC,IAAI,MAAM,2BAA2B;AAE5C,OAAOC,MAAM,MAAM,iBAAiB;AAuBpC,SAASC,aAAaA,CAAAC,IAAA,EAepBC,GAA+B;EAAA,IAd/B;IACEC,SAAS;IACTC,SAAS;IACTC,QAAQ;IACRC,OAAO;IACPC,YAAY;IACZC,YAAY;IACZC,OAAO;IACPC,MAAM;IACNC,QAAQ,GAAG,KAAK;IAChBC,KAAK;IACLC,QAAQ,GAAG,KAAK;IAChBC;EAAkB,CACC,GAAAb,IAAA;EAGrB,OACEL,KAAA,CAAAmB,aAAA;IAAKX,SAAS,EAAEP,IAAI,CAACE,MAAM,CAAC,iBAAiB,CAAC,EAAE,CAACe,kBAAkB,IAAIf,MAAM,CAAC,6BAA6B,CAAC;EAAC,GAC3GH,KAAA,CAAAmB,aAAA;IAAA,iBACiBR,YAAY;IAAA,iBACZC,YAAY;IAAA,iBACZ,IAAI;IAAA,cACPL,SAAS;IAAA,iBACNQ,QAAQ;IACvBA,QAAQ,EAAEA,QAAQ;IAClBP,SAAS,EAAEP,IAAI,CACbE,MAAM,CAACiB,OAAO,EACd;MACE,CAACjB,MAAM,CAACc,QAAQ,GAAGA,QAAQ;MAC3B,CAACd,MAAM,CAACa,KAAK,GAAGA;KACjB,EACDR,SAAS,CACV;IACDK,OAAO,EAAEA,OAAO;IAChBP,GAAG,EAAEA,GAA6B;IAClCe,IAAI,EAAC,QAAQ;IAAA,eACAP;EAAM,GAEnBd,KAAA,CAAAmB,aAAA;IAAMX,SAAS,EAAEP,IAAI,CAACe,KAAK,IAAIb,MAAM,CAAC,uBAAuB,CAAC;EAAC,GAC5D,CAACM,QAAQ,IAAIC,OAAO,KAAKV,KAAA,CAAAmB,aAAA,CAACjB,IAAI;IAACoB,IAAI,EAAEb,QAAQ;IAAEc,GAAG,EAAEb;EAAO,EAAI,CAC3D,CACA,EACRM,KAAK,IAAIhB,KAAA,CAAAmB,aAAA;IAAKX,SAAS,EAAEL,MAAM,CAACqB;EAAG,EAAI,CACpC;AAEV;AAEA,eAAexB,KAAK,CAACyB,UAAU,CAACrB,aAAa,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}