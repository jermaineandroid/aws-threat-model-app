{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useMobile } from '../../../internal/hooks/use-mobile';\nimport { splitItems } from '../../drawer/drawers-helpers';\nimport OverflowMenu from '../../drawer/overflow-menu';\nimport { TOOLS_DRAWER_ID } from '../../utils/use-drawers';\nimport TriggerButton from './trigger-button';\nimport splitPanelTestUtilStyles from '../../../split-panel/test-classes/styles.css.js';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nexport function DrawerTriggers(_ref) {\n  let {\n    ariaLabels,\n    activeDrawerId,\n    drawers,\n    drawersFocusRef,\n    onActiveDrawerChange,\n    splitPanelFocusRef,\n    splitPanelToggleProps,\n    onSplitPanelToggle\n  } = _ref;\n  const isMobile = useMobile();\n  const hasMultipleTriggers = drawers.length > 1;\n  const previousActiveDrawerId = useRef(activeDrawerId);\n  const [containerWidth, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxWidth);\n  if (!drawers && !splitPanelToggleProps) {\n    return null;\n  }\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n  const getIndexOfOverflowItem = () => {\n    if (isMobile) {\n      return 2;\n    }\n    if (containerWidth) {\n      const ITEM_WIDTH = 50; // Roughly 34px + padding = 42px but added extra for safety\n      const overflowSpot = containerWidth;\n      const index = Math.floor(overflowSpot / ITEM_WIDTH);\n      let splitPanelItem = 0;\n      if (splitPanelToggleProps) {\n        splitPanelItem = 1;\n      }\n      return index - splitPanelItem;\n    }\n    return 0;\n  };\n  const {\n    visibleItems,\n    overflowItems\n  } = splitItems(drawers, getIndexOfOverflowItem(), activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : null);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n  const toolsOnlyMode = drawers.length === 1 && drawers[0].id === TOOLS_DRAWER_ID;\n  return React.createElement(\"aside\", {\n    className: styles['drawers-desktop-triggers-container'],\n    \"aria-label\": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers,\n    ref: triggersContainerRef,\n    role: \"region\"\n  }, React.createElement(\"div\", {\n    className: clsx(styles['drawers-trigger-content'], {\n      [styles['has-multiple-triggers']]: hasMultipleTriggers,\n      [styles['has-open-drawer']]: activeDrawerId\n    }),\n    role: \"toolbar\",\n    \"aria-orientation\": \"horizontal\"\n  }, splitPanelToggleProps && React.createElement(React.Fragment, null, React.createElement(TriggerButton, {\n    ariaLabel: splitPanelToggleProps.ariaLabel,\n    ariaControls: splitPanelToggleProps.controlId,\n    ariaExpanded: splitPanelToggleProps.active,\n    className: clsx(styles['drawers-trigger'], splitPanelTestUtilStyles['open-button']),\n    iconName: splitPanelToggleProps.position === 'side' ? 'view-vertical' : 'view-horizontal',\n    onClick: () => onSplitPanelToggle === null || onSplitPanelToggle === void 0 ? void 0 : onSplitPanelToggle(),\n    selected: splitPanelToggleProps.active,\n    ref: splitPanelFocusRef\n  }), hasMultipleTriggers ? React.createElement(\"div\", {\n    className: styles['group-divider']\n  }) : null), visibleItems.map(item => {\n    var _a;\n    return React.createElement(TriggerButton, {\n      ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton,\n      ariaExpanded: item.id === activeDrawerId,\n      ariaControls: activeDrawerId === item.id ? item.id : undefined,\n      className: clsx(styles['drawers-trigger'], !toolsOnlyMode && testutilStyles['drawers-trigger'], item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']),\n      iconName: item.trigger.iconName,\n      iconSvg: item.trigger.iconSvg,\n      key: item.id,\n      onClick: () => onActiveDrawerChange === null || onActiveDrawerChange === void 0 ? void 0 : onActiveDrawerChange(activeDrawerId !== item.id ? item.id : null),\n      ref: item.id === previousActiveDrawerId.current ? drawersFocusRef : undefined,\n      selected: item.id === activeDrawerId,\n      badge: item.badge,\n      testId: `awsui-app-layout-trigger-${item.id}`\n    });\n  }), overflowItems.length > 0 && React.createElement(OverflowMenu, {\n    items: overflowItems,\n    ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow,\n    customTriggerBuilder: _ref2 => {\n      let {\n        onClick,\n        triggerRef,\n        ariaLabel,\n        ariaExpanded,\n        testUtilsClass\n      } = _ref2;\n      return React.createElement(TriggerButton, {\n        ref: triggerRef,\n        ariaLabel: ariaLabel,\n        ariaExpanded: ariaExpanded,\n        badge: overflowMenuHasBadge,\n        className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], testUtilsClass),\n        iconName: \"ellipsis\",\n        onClick: onClick\n      });\n    },\n    onItemClick: event => onActiveDrawerChange === null || onActiveDrawerChange === void 0 ? void 0 : onActiveDrawerChange(event.detail.id)\n  })));\n}","map":{"version":3,"names":["React","useRef","clsx","useContainerQuery","useMobile","splitItems","OverflowMenu","TOOLS_DRAWER_ID","TriggerButton","splitPanelTestUtilStyles","testutilStyles","styles","DrawerTriggers","_ref","ariaLabels","activeDrawerId","drawers","drawersFocusRef","onActiveDrawerChange","splitPanelFocusRef","splitPanelToggleProps","onSplitPanelToggle","isMobile","hasMultipleTriggers","length","previousActiveDrawerId","containerWidth","triggersContainerRef","rect","contentBoxWidth","current","getIndexOfOverflowItem","ITEM_WIDTH","overflowSpot","index","Math","floor","splitPanelItem","visibleItems","overflowItems","overflowMenuHasBadge","find","item","badge","toolsOnlyMode","id","createElement","className","ref","role","Fragment","ariaLabel","ariaControls","controlId","ariaExpanded","active","iconName","position","onClick","selected","map","_a","triggerButton","undefined","trigger","iconSvg","key","testId","items","drawersOverflowWithBadge","drawersOverflow","customTriggerBuilder","_ref2","triggerRef","testUtilsClass","onItemClick","event","detail"],"sources":["/home/jj/aws-threat-model-app/node_modules/src/app-layout/visual-refresh-toolbar/toolbar/drawer-triggers.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nimport { useMobile } from '../../../internal/hooks/use-mobile';\nimport { splitItems } from '../../drawer/drawers-helpers';\nimport OverflowMenu from '../../drawer/overflow-menu';\nimport { AppLayoutProps, AppLayoutPropsWithDefaults } from '../../interfaces';\nimport { TOOLS_DRAWER_ID } from '../../utils/use-drawers';\nimport { Focusable } from '../../utils/use-focus-control';\nimport TriggerButton from './trigger-button';\n\nimport splitPanelTestUtilStyles from '../../../split-panel/test-classes/styles.css.js';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\nexport interface SplitPanelToggleProps {\n  displayed: boolean;\n  ariaLabel: string | undefined;\n  controlId: string | undefined;\n  active: boolean;\n  position: AppLayoutProps.SplitPanelPosition;\n}\n\ninterface DrawerTriggersProps {\n  ariaLabels: AppLayoutPropsWithDefaults['ariaLabels'];\n\n  activeDrawerId: string | null;\n  drawersFocusRef: React.Ref<Focusable> | undefined;\n  drawers: ReadonlyArray<AppLayoutProps.Drawer>;\n  onActiveDrawerChange: ((drawerId: string | null) => void) | undefined;\n\n  splitPanelToggleProps: SplitPanelToggleProps | undefined;\n  splitPanelFocusRef: React.Ref<Focusable> | undefined;\n  onSplitPanelToggle: (() => void) | undefined;\n}\n\nexport function DrawerTriggers({\n  ariaLabels,\n  activeDrawerId,\n  drawers,\n  drawersFocusRef,\n  onActiveDrawerChange,\n  splitPanelFocusRef,\n  splitPanelToggleProps,\n  onSplitPanelToggle,\n}: DrawerTriggersProps) {\n  const isMobile = useMobile();\n  const hasMultipleTriggers = drawers.length > 1;\n\n  const previousActiveDrawerId = useRef(activeDrawerId);\n  const [containerWidth, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxWidth);\n  if (!drawers && !splitPanelToggleProps) {\n    return null;\n  }\n\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n\n  const getIndexOfOverflowItem = () => {\n    if (isMobile) {\n      return 2;\n    }\n    if (containerWidth) {\n      const ITEM_WIDTH = 50; // Roughly 34px + padding = 42px but added extra for safety\n      const overflowSpot = containerWidth;\n\n      const index = Math.floor(overflowSpot / ITEM_WIDTH);\n\n      let splitPanelItem = 0;\n      if (splitPanelToggleProps) {\n        splitPanelItem = 1;\n      }\n      return index - splitPanelItem;\n    }\n    return 0;\n  };\n\n  const { visibleItems, overflowItems } = splitItems(drawers, getIndexOfOverflowItem(), activeDrawerId ?? null);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n  const toolsOnlyMode = drawers.length === 1 && drawers[0].id === TOOLS_DRAWER_ID;\n\n  return (\n    <aside\n      className={styles['drawers-desktop-triggers-container']}\n      aria-label={ariaLabels?.drawers}\n      ref={triggersContainerRef}\n      role=\"region\"\n    >\n      <div\n        className={clsx(styles['drawers-trigger-content'], {\n          [styles['has-multiple-triggers']]: hasMultipleTriggers,\n          [styles['has-open-drawer']]: activeDrawerId,\n        })}\n        role=\"toolbar\"\n        aria-orientation=\"horizontal\"\n      >\n        {splitPanelToggleProps && (\n          <>\n            <TriggerButton\n              ariaLabel={splitPanelToggleProps.ariaLabel}\n              ariaControls={splitPanelToggleProps.controlId}\n              ariaExpanded={splitPanelToggleProps.active}\n              className={clsx(styles['drawers-trigger'], splitPanelTestUtilStyles['open-button'])}\n              iconName={splitPanelToggleProps.position === 'side' ? 'view-vertical' : 'view-horizontal'}\n              onClick={() => onSplitPanelToggle?.()}\n              selected={splitPanelToggleProps.active}\n              ref={splitPanelFocusRef}\n            />\n            {hasMultipleTriggers ? <div className={styles['group-divider']}></div> : null}\n          </>\n        )}\n        {visibleItems.map(item => {\n          return (\n            <TriggerButton\n              ariaLabel={item.ariaLabels?.triggerButton}\n              ariaExpanded={item.id === activeDrawerId}\n              ariaControls={activeDrawerId === item.id ? item.id : undefined}\n              className={clsx(\n                styles['drawers-trigger'],\n                !toolsOnlyMode && testutilStyles['drawers-trigger'],\n                item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n              )}\n              iconName={item.trigger.iconName}\n              iconSvg={item.trigger.iconSvg}\n              key={item.id}\n              onClick={() => onActiveDrawerChange?.(activeDrawerId !== item.id ? item.id : null)}\n              ref={item.id === previousActiveDrawerId.current ? drawersFocusRef : undefined}\n              selected={item.id === activeDrawerId}\n              badge={item.badge}\n              testId={`awsui-app-layout-trigger-${item.id}`}\n            />\n          );\n        })}\n        {overflowItems.length > 0 && (\n          <OverflowMenu\n            items={overflowItems}\n            ariaLabel={overflowMenuHasBadge ? ariaLabels?.drawersOverflowWithBadge : ariaLabels?.drawersOverflow}\n            customTriggerBuilder={({ onClick, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => (\n              <TriggerButton\n                ref={triggerRef}\n                ariaLabel={ariaLabel}\n                ariaExpanded={ariaExpanded}\n                badge={overflowMenuHasBadge}\n                className={clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], testUtilsClass)}\n                iconName=\"ellipsis\"\n                onClick={onClick}\n              />\n            )}\n            onItemClick={event => onActiveDrawerChange?.(event.detail.id)}\n          />\n        )}\n      </div>\n    </aside>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}