import { __rest } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import clsx from 'clsx';
import { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';
import { InternalButton } from '../button/internal';
import InternalButtonDropdown from '../button-dropdown/internal';
import { useInternalI18n } from '../i18n/context';
import InternalIcon from '../icon/internal';
import { getBaseProps } from '../internal/base-component';
import { fireCancelableEvent } from '../internal/events';
import { useMobile } from '../internal/hooks/use-mobile';
import { checkSafeUrl } from '../internal/utils/check-safe-url';
import { createWidgetizedComponent } from '../internal/widgets';
import { BreadcrumbItem } from './item/item';
import { getEventDetail } from './utils';
import analyticsSelectors from './analytics-metadata/styles.css.js';
import styles from './styles.css.js';
/**
 * Provided for backwards compatibility
 */
const DEFAULT_EXPAND_ARIA_LABEL = 'Show path';
const getDropdownTrigger = ({ ariaLabel, triggerRef, disabled, testUtilsClass, isOpen, onClick, }) => {
    return (React.createElement(InternalButton, { ref: triggerRef, className: testUtilsClass, disabled: disabled, onClick: event => {
            event.preventDefault();
            onClick();
        }, ariaExpanded: isOpen, "aria-haspopup": true, ariaLabel: ariaLabel, variant: "breadcrumb-group", formAction: "none" }, "..."));
};
const EllipsisDropdown = ({ ariaLabel, dropdownItems, onDropdownItemClick, onDropdownItemFollow, }) => {
    var _a;
    const i18n = useInternalI18n('breadcrumb-group');
    return (React.createElement("li", { className: styles.ellipsis },
        React.createElement(InternalButtonDropdown, { ariaLabel: (_a = i18n('expandAriaLabel', ariaLabel)) !== null && _a !== void 0 ? _a : DEFAULT_EXPAND_ARIA_LABEL, items: dropdownItems, onItemClick: onDropdownItemClick, onItemFollow: onDropdownItemFollow, customTriggerBuilder: getDropdownTrigger, analyticsMetadataTransformer: metadata => {
                var _a, _b;
                if ((_a = metadata.detail) === null || _a === void 0 ? void 0 : _a.id) {
                    delete metadata.detail.id;
                }
                if ((_b = metadata.detail) === null || _b === void 0 ? void 0 : _b.position) {
                    metadata.detail.position = `${parseInt(metadata.detail.position, 10) + 1}`;
                }
                return metadata;
            } }),
        React.createElement("span", { className: styles.icon },
            React.createElement(InternalIcon, { name: "angle-right" }))));
};
export function BreadcrumbGroupImplementation(_a) {
    var { items = [], ariaLabel, expandAriaLabel, onClick, onFollow, __internalRootRef, __injectAnalyticsComponentMetadata } = _a, props = __rest(_a, ["items", "ariaLabel", "expandAriaLabel", "onClick", "onFollow", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
    for (const item of items) {
        checkSafeUrl('BreadcrumbGroup', item.href);
    }
    const baseProps = getBaseProps(props);
    const isMobile = useMobile();
    let breadcrumbItems = items.map((item, index) => {
        const isLast = index === items.length - 1;
        const clickAnalyticsMetadata = {
            action: 'click',
            detail: {
                position: `${index + 1}`,
                label: `.${analyticsSelectors['breadcrumb-item']}`,
                href: item.href || '',
            },
        };
        return (React.createElement("li", Object.assign({ className: styles.item, key: index }, (isLast ? {} : getAnalyticsMetadataAttribute(clickAnalyticsMetadata))),
            React.createElement(BreadcrumbItem, { item: item, onClick: onClick, onFollow: onFollow, isCompressed: isMobile, isLast: isLast, isDisplayed: !isMobile || isLast || index === 0 })));
    });
    const getEventItem = (e) => {
        const { id } = e.detail;
        return items[parseInt(id)];
    };
    // Add ellipsis
    if (breadcrumbItems.length >= 2) {
        const dropdownItems = items
            .slice(1, items.length - 1)
            .map((item, index) => ({
            id: (index + 1).toString(),
            text: item.text,
            href: item.href || '#',
        }));
        breadcrumbItems = [
            breadcrumbItems[0],
            React.createElement(EllipsisDropdown, { key: 'ellipsis', ariaLabel: expandAriaLabel, dropdownItems: dropdownItems, onDropdownItemClick: e => fireCancelableEvent(onClick, getEventDetail(getEventItem(e)), e), onDropdownItemFollow: e => fireCancelableEvent(onFollow, getEventDetail(getEventItem(e)), e) }),
            ...breadcrumbItems.slice(1),
        ];
    }
    const componentAnalyticsMetadata = {
        name: 'awsui.BreadcrumbGroup',
        label: { root: 'self' },
    };
    return (React.createElement("nav", Object.assign({}, baseProps, { className: clsx(styles['breadcrumb-group'], isMobile && styles.mobile, items.length <= 2 && styles['mobile-short'], baseProps.className), "aria-label": ariaLabel || undefined, ref: __internalRootRef }, (__injectAnalyticsComponentMetadata
        ? Object.assign({}, getAnalyticsMetadataAttribute({
            component: componentAnalyticsMetadata,
        })) : {})),
        React.createElement("ol", { className: styles['breadcrumb-group-list'] }, breadcrumbItems)));
}
export const createWidgetizedBreadcrumbGroup = createWidgetizedComponent(BreadcrumbGroupImplementation);
//# sourceMappingURL=implementation.js.map