{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useImperativeHandle, useState } from 'react';\nimport ScreenreaderOnly from '../../internal/components/screenreader-only';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { useMobile } from '../../internal/hooks/use-mobile';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { useGetGlobalBreadcrumbs } from '../../internal/plugins/helpers/use-global-breadcrumbs';\nimport globalVars from '../../internal/styles/global-vars';\nimport { getSplitPanelDefaultSize } from '../../split-panel/utils/size-utils';\nimport { useDrawers } from '../utils/use-drawers';\nimport { useFocusControl } from '../utils/use-focus-control';\nimport { useSplitPanelFocusControl } from '../utils/use-split-panel-focus-control';\nimport { computeHorizontalLayout, computeVerticalLayout } from './compute-layout';\nimport { AppLayoutDrawer, AppLayoutNavigation, AppLayoutNotifications, AppLayoutSplitPanelBottom, AppLayoutSplitPanelSide, AppLayoutToolbar } from './internal';\nimport { useMultiAppLayout } from './multi-layout';\nimport { SkeletonLayout } from './skeleton';\nconst AppLayoutVisualRefreshToolbar = React.forwardRef((_a, forwardRef) => {\n  var _b, _c;\n  var {\n      ariaLabels,\n      contentHeader,\n      content,\n      navigationOpen,\n      navigationWidth,\n      navigation,\n      navigationHide,\n      onNavigationChange,\n      tools,\n      toolsOpen: controlledToolsOpen,\n      onToolsChange,\n      toolsHide,\n      toolsWidth,\n      contentType,\n      headerVariant,\n      breadcrumbs,\n      notifications,\n      stickyNotifications,\n      splitPanelPreferences: controlledSplitPanelPreferences,\n      splitPanelOpen: controlledSplitPanelOpen,\n      splitPanel,\n      splitPanelSize: controlledSplitPanelSize,\n      onSplitPanelToggle,\n      onSplitPanelResize,\n      onSplitPanelPreferencesChange,\n      disableContentPaddings,\n      minContentWidth,\n      maxContentWidth,\n      placement\n    } = _a,\n    rest = __rest(_a, [\"ariaLabels\", \"contentHeader\", \"content\", \"navigationOpen\", \"navigationWidth\", \"navigation\", \"navigationHide\", \"onNavigationChange\", \"tools\", \"toolsOpen\", \"onToolsChange\", \"toolsHide\", \"toolsWidth\", \"contentType\", \"headerVariant\", \"breadcrumbs\", \"notifications\", \"stickyNotifications\", \"splitPanelPreferences\", \"splitPanelOpen\", \"splitPanel\", \"splitPanelSize\", \"onSplitPanelToggle\", \"onSplitPanelResize\", \"onSplitPanelPreferencesChange\", \"disableContentPaddings\", \"minContentWidth\", \"maxContentWidth\", \"placement\"]);\n  const isMobile = useMobile();\n  const {\n    __embeddedViewMode: embeddedViewMode,\n    __forceDeduplicationType: forceDeduplicationType\n  } = rest;\n  const splitPanelControlId = useUniqueId('split-panel');\n  const [toolbarState, setToolbarState] = useState('show');\n  const [toolbarHeight, setToolbarHeight] = useState(0);\n  const [notificationsHeight, setNotificationsHeight] = useState(0);\n  const onNavigationToggle = open => {\n    fireNonCancelableEvent(onNavigationChange, {\n      open\n    });\n  };\n  const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, false, {\n    componentName: 'AppLayout',\n    controlledProp: 'toolsOpen',\n    changeHandler: 'onToolsChange'\n  });\n  const onToolsToggle = open => {\n    setToolsOpen(open);\n    drawersFocusControl.setFocus();\n    fireNonCancelableEvent(onToolsChange, {\n      open\n    });\n  };\n  const {\n    drawers,\n    activeDrawer,\n    minDrawerSize,\n    activeDrawerSize,\n    ariaLabelsWithDrawers,\n    onActiveDrawerChange,\n    onActiveDrawerResize\n  } = useDrawers(rest, ariaLabels, {\n    ariaLabels,\n    toolsHide,\n    toolsOpen,\n    tools,\n    toolsWidth,\n    onToolsToggle\n  });\n  const onActiveDrawerChangeHandler = drawerId => {\n    onActiveDrawerChange(drawerId);\n    drawersFocusControl.setFocus();\n  };\n  const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(controlledSplitPanelOpen, onSplitPanelToggle, false, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelOpen',\n    changeHandler: 'onSplitPanelToggle'\n  });\n  const onSplitPanelToggleHandler = () => {\n    setSplitPanelOpen(!splitPanelOpen);\n    fireNonCancelableEvent(onSplitPanelToggle, {\n      open: !splitPanelOpen\n    });\n  };\n  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, undefined, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelPreferences',\n    changeHandler: 'onSplitPanelPreferencesChange'\n  });\n  const onSplitPanelPreferencesChangeHandler = detail => {\n    setSplitPanelPreferences(detail);\n    splitPanelFocusControl.setLastInteraction({\n      type: 'position'\n    });\n    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n  };\n  const [splitPanelSize = 0, setSplitPanelSize] = useControllable(controlledSplitPanelSize, onSplitPanelResize, getSplitPanelDefaultSize((_b = splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) !== null && _b !== void 0 ? _b : 'bottom'), {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelSize',\n    changeHandler: 'onSplitPanelResize'\n  });\n  const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n  const onSplitPanelResizeHandler = size => {\n    setSplitPanelSize(size);\n    fireNonCancelableEvent(onSplitPanelResize, {\n      size\n    });\n  };\n  const [splitPanelToggleConfig, setSplitPanelToggleConfig] = useState({\n    ariaLabel: undefined,\n    displayed: false\n  });\n  const drawersFocusControl = useFocusControl(!!(activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id), !isMobile, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id);\n  const navigationFocusControl = useFocusControl(navigationOpen);\n  const splitPanelFocusControl = useSplitPanelFocusControl([splitPanelPreferences, splitPanelOpen]);\n  useImperativeHandle(forwardRef, () => ({\n    closeNavigationIfNecessary: () => isMobile && onNavigationToggle(false),\n    openTools: () => onToolsToggle(true),\n    focusToolsClose: () => drawersFocusControl.setFocus(true),\n    focusActiveDrawer: () => drawersFocusControl.setFocus(true),\n    focusSplitPanel: () => {\n      var _a;\n      return (_a = splitPanelFocusControl.refs.slider.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }));\n  const resolvedNavigation = navigationHide ? null : navigation !== null && navigation !== void 0 ? navigation : React.createElement(React.Fragment, null);\n  const {\n    maxDrawerSize,\n    maxSplitPanelSize,\n    splitPanelForcedPosition,\n    splitPanelPosition\n  } = computeHorizontalLayout({\n    activeDrawerSize: activeDrawer ? activeDrawerSize : 0,\n    splitPanelSize,\n    minContentWidth,\n    navigationOpen: !!resolvedNavigation && navigationOpen,\n    navigationWidth,\n    placement,\n    splitPanelOpen,\n    splitPanelPosition: splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position,\n    isMobile\n  });\n  const {\n    registered,\n    toolbarProps\n  } = useMultiAppLayout({\n    forceDeduplicationType,\n    ariaLabels: ariaLabelsWithDrawers,\n    navigation: resolvedNavigation,\n    navigationOpen,\n    onNavigationToggle,\n    navigationFocusRef: navigationFocusControl.refs.toggle,\n    breadcrumbs,\n    activeDrawerId: (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== null && _c !== void 0 ? _c : null,\n    // only pass it down if there are non-empty drawers or tools\n    drawers: (drawers === null || drawers === void 0 ? void 0 : drawers.length) || !toolsHide ? drawers : undefined,\n    onActiveDrawerChange: onActiveDrawerChangeHandler,\n    drawersFocusRef: drawersFocusControl.refs.toggle,\n    splitPanel,\n    splitPanelToggleProps: Object.assign(Object.assign({}, splitPanelToggleConfig), {\n      active: splitPanelOpen,\n      controlId: splitPanelControlId,\n      position: splitPanelPosition\n    }),\n    splitPanelFocusRef: splitPanelFocusControl.refs.toggle,\n    onSplitPanelToggle: onSplitPanelToggleHandler\n  });\n  const hasToolbar = !embeddedViewMode && !!toolbarProps;\n  const discoveredBreadcrumbs = useGetGlobalBreadcrumbs(hasToolbar);\n  const verticalOffsets = computeVerticalLayout({\n    topOffset: placement.insetBlockStart,\n    hasVisibleToolbar: hasToolbar && toolbarState !== 'hide' && !isMobile,\n    notificationsHeight: notificationsHeight !== null && notificationsHeight !== void 0 ? notificationsHeight : 0,\n    toolbarHeight: toolbarHeight !== null && toolbarHeight !== void 0 ? toolbarHeight : 0,\n    stickyNotifications: !!stickyNotifications\n  });\n  const appLayoutInternals = {\n    ariaLabels: ariaLabelsWithDrawers,\n    headerVariant,\n    isMobile,\n    breadcrumbs,\n    discoveredBreadcrumbs,\n    stickyNotifications,\n    navigationOpen,\n    navigation: resolvedNavigation,\n    navigationFocusControl,\n    activeDrawer,\n    activeDrawerSize,\n    minDrawerSize,\n    maxDrawerSize,\n    drawers: drawers,\n    drawersFocusControl,\n    splitPanelPosition,\n    splitPanelToggleConfig,\n    splitPanelOpen,\n    splitPanelControlId,\n    splitPanelFocusControl,\n    placement,\n    toolbarState,\n    setToolbarState,\n    verticalOffsets,\n    setToolbarHeight,\n    setNotificationsHeight,\n    onSplitPanelToggle: onSplitPanelToggleHandler,\n    onNavigationToggle,\n    onActiveDrawerChange: onActiveDrawerChangeHandler,\n    onActiveDrawerResize\n  };\n  const splitPanelInternals = {\n    bottomOffset: 0,\n    getMaxHeight: () => {\n      const availableHeight = document.documentElement.clientHeight - placement.insetBlockStart - placement.insetBlockEnd;\n      // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    },\n    maxWidth: maxSplitPanelSize,\n    isForcedPosition: splitPanelForcedPosition,\n    isOpen: splitPanelOpen,\n    leftOffset: 0,\n    onPreferencesChange: onSplitPanelPreferencesChangeHandler,\n    onResize: onSplitPanelResizeHandler,\n    onToggle: onSplitPanelToggleHandler,\n    position: splitPanelPosition,\n    reportSize: size => setSplitPanelReportedSize(size),\n    reportHeaderHeight: () => {\n      /*unused in this design*/\n    },\n    rightOffset: 0,\n    size: splitPanelSize,\n    topOffset: 0,\n    setSplitPanelToggle: setSplitPanelToggleConfig,\n    refs: splitPanelFocusControl.refs\n  };\n  return React.createElement(React.Fragment, null, !hasToolbar && breadcrumbs ? React.createElement(ScreenreaderOnly, null, breadcrumbs) : null, React.createElement(SkeletonLayout, {\n    style: {\n      [globalVars.stickyVerticalTopOffset]: `${verticalOffsets.header}px`,\n      [globalVars.stickyVerticalBottomOffset]: `${placement.insetBlockEnd}px`,\n      paddingBlockEnd: splitPanelOpen && splitPanelPosition === 'bottom' ? splitPanelReportedSize : ''\n    },\n    toolbar: hasToolbar && React.createElement(AppLayoutToolbar, {\n      appLayoutInternals: appLayoutInternals,\n      toolbarProps: toolbarProps\n    }),\n    notifications: notifications && React.createElement(AppLayoutNotifications, {\n      appLayoutInternals: appLayoutInternals\n    }, notifications),\n    contentHeader: contentHeader,\n    // delay rendering the content until registration of this instance is complete\n    content: registered ? content : null,\n    navigation: resolvedNavigation && React.createElement(AppLayoutNavigation, {\n      appLayoutInternals: appLayoutInternals\n    }),\n    navigationOpen: navigationOpen,\n    navigationWidth: navigationWidth,\n    tools: activeDrawer && React.createElement(AppLayoutDrawer, {\n      appLayoutInternals: appLayoutInternals\n    }),\n    toolsOpen: !!activeDrawer,\n    toolsWidth: activeDrawerSize,\n    sideSplitPanel: splitPanelPosition === 'side' && React.createElement(AppLayoutSplitPanelSide, {\n      appLayoutInternals: appLayoutInternals,\n      splitPanelInternals: splitPanelInternals\n    }, splitPanel),\n    bottomSplitPanel: splitPanelPosition === 'bottom' && React.createElement(AppLayoutSplitPanelBottom, {\n      appLayoutInternals: appLayoutInternals,\n      splitPanelInternals: splitPanelInternals\n    }, splitPanel),\n    splitPanelOpen: splitPanelOpen,\n    placement: placement,\n    contentType: contentType,\n    maxContentWidth: maxContentWidth,\n    disableContentPaddings: disableContentPaddings\n  }));\n});\nexport default AppLayoutVisualRefreshToolbar;","map":{"version":3,"names":["React","useImperativeHandle","useState","ScreenreaderOnly","fireNonCancelableEvent","useControllable","useMobile","useUniqueId","useGetGlobalBreadcrumbs","globalVars","getSplitPanelDefaultSize","useDrawers","useFocusControl","useSplitPanelFocusControl","computeHorizontalLayout","computeVerticalLayout","AppLayoutDrawer","AppLayoutNavigation","AppLayoutNotifications","AppLayoutSplitPanelBottom","AppLayoutSplitPanelSide","AppLayoutToolbar","useMultiAppLayout","SkeletonLayout","AppLayoutVisualRefreshToolbar","forwardRef","_a","ariaLabels","contentHeader","content","navigationOpen","navigationWidth","navigation","navigationHide","onNavigationChange","tools","toolsOpen","controlledToolsOpen","onToolsChange","toolsHide","toolsWidth","contentType","headerVariant","breadcrumbs","notifications","stickyNotifications","splitPanelPreferences","controlledSplitPanelPreferences","splitPanelOpen","controlledSplitPanelOpen","splitPanel","splitPanelSize","controlledSplitPanelSize","onSplitPanelToggle","onSplitPanelResize","onSplitPanelPreferencesChange","disableContentPaddings","minContentWidth","maxContentWidth","placement","rest","__rest","isMobile","__embeddedViewMode","embeddedViewMode","__forceDeduplicationType","forceDeduplicationType","splitPanelControlId","toolbarState","setToolbarState","toolbarHeight","setToolbarHeight","notificationsHeight","setNotificationsHeight","onNavigationToggle","open","setToolsOpen","componentName","controlledProp","changeHandler","onToolsToggle","drawersFocusControl","setFocus","drawers","activeDrawer","minDrawerSize","activeDrawerSize","ariaLabelsWithDrawers","onActiveDrawerChange","onActiveDrawerResize","onActiveDrawerChangeHandler","drawerId","setSplitPanelOpen","onSplitPanelToggleHandler","setSplitPanelPreferences","undefined","onSplitPanelPreferencesChangeHandler","detail","splitPanelFocusControl","setLastInteraction","type","setSplitPanelSize","_b","position","splitPanelReportedSize","setSplitPanelReportedSize","onSplitPanelResizeHandler","size","splitPanelToggleConfig","setSplitPanelToggleConfig","ariaLabel","displayed","id","navigationFocusControl","closeNavigationIfNecessary","openTools","focusToolsClose","focusActiveDrawer","focusSplitPanel","refs","slider","current","focus","resolvedNavigation","createElement","Fragment","maxDrawerSize","maxSplitPanelSize","splitPanelForcedPosition","splitPanelPosition","registered","toolbarProps","navigationFocusRef","toggle","activeDrawerId","_c","length","drawersFocusRef","splitPanelToggleProps","Object","assign","active","controlId","splitPanelFocusRef","hasToolbar","discoveredBreadcrumbs","verticalOffsets","topOffset","insetBlockStart","hasVisibleToolbar","appLayoutInternals","splitPanelInternals","bottomOffset","getMaxHeight","availableHeight","document","documentElement","clientHeight","insetBlockEnd","maxWidth","isForcedPosition","isOpen","leftOffset","onPreferencesChange","onResize","onToggle","reportSize","reportHeaderHeight","rightOffset","setSplitPanelToggle","style","stickyVerticalTopOffset","header","stickyVerticalBottomOffset","paddingBlockEnd","toolbar","sideSplitPanel","bottomSplitPanel"],"sources":["/home/jj/aws-threat-model-app/node_modules/src/app-layout/visual-refresh-toolbar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useImperativeHandle, useState } from 'react';\n\nimport ScreenreaderOnly from '../../internal/components/screenreader-only';\nimport { SplitPanelSideToggleProps } from '../../internal/context/split-panel-context';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { useMobile } from '../../internal/hooks/use-mobile';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { useGetGlobalBreadcrumbs } from '../../internal/plugins/helpers/use-global-breadcrumbs';\nimport globalVars from '../../internal/styles/global-vars';\nimport { getSplitPanelDefaultSize } from '../../split-panel/utils/size-utils';\nimport { AppLayoutProps, AppLayoutPropsWithDefaults } from '../interfaces';\nimport { SplitPanelProviderProps } from '../split-panel';\nimport { useDrawers } from '../utils/use-drawers';\nimport { useFocusControl } from '../utils/use-focus-control';\nimport { useSplitPanelFocusControl } from '../utils/use-split-panel-focus-control';\nimport { computeHorizontalLayout, computeVerticalLayout } from './compute-layout';\nimport { AppLayoutInternals } from './interfaces';\nimport {\n  AppLayoutDrawer,\n  AppLayoutNavigation,\n  AppLayoutNotifications,\n  AppLayoutSplitPanelBottom,\n  AppLayoutSplitPanelSide,\n  AppLayoutToolbar,\n} from './internal';\nimport { useMultiAppLayout } from './multi-layout';\nimport { SkeletonLayout } from './skeleton';\n\nconst AppLayoutVisualRefreshToolbar = React.forwardRef<AppLayoutProps.Ref, AppLayoutPropsWithDefaults>(\n  (\n    {\n      ariaLabels,\n      contentHeader,\n      content,\n      navigationOpen,\n      navigationWidth,\n      navigation,\n      navigationHide,\n      onNavigationChange,\n      tools,\n      toolsOpen: controlledToolsOpen,\n      onToolsChange,\n      toolsHide,\n      toolsWidth,\n      contentType,\n      headerVariant,\n      breadcrumbs,\n      notifications,\n      stickyNotifications,\n      splitPanelPreferences: controlledSplitPanelPreferences,\n      splitPanelOpen: controlledSplitPanelOpen,\n      splitPanel,\n      splitPanelSize: controlledSplitPanelSize,\n      onSplitPanelToggle,\n      onSplitPanelResize,\n      onSplitPanelPreferencesChange,\n      disableContentPaddings,\n      minContentWidth,\n      maxContentWidth,\n      placement,\n      ...rest\n    },\n    forwardRef\n  ) => {\n    const isMobile = useMobile();\n    const { __embeddedViewMode: embeddedViewMode, __forceDeduplicationType: forceDeduplicationType } = rest as any;\n    const splitPanelControlId = useUniqueId('split-panel');\n    const [toolbarState, setToolbarState] = useState<'show' | 'hide'>('show');\n    const [toolbarHeight, setToolbarHeight] = useState(0);\n    const [notificationsHeight, setNotificationsHeight] = useState(0);\n\n    const onNavigationToggle = (open: boolean) => {\n      fireNonCancelableEvent(onNavigationChange, { open });\n    };\n\n    const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, false, {\n      componentName: 'AppLayout',\n      controlledProp: 'toolsOpen',\n      changeHandler: 'onToolsChange',\n    });\n    const onToolsToggle = (open: boolean) => {\n      setToolsOpen(open);\n      drawersFocusControl.setFocus();\n      fireNonCancelableEvent(onToolsChange, { open });\n    };\n\n    const {\n      drawers,\n      activeDrawer,\n      minDrawerSize,\n      activeDrawerSize,\n      ariaLabelsWithDrawers,\n      onActiveDrawerChange,\n      onActiveDrawerResize,\n    } = useDrawers(rest, ariaLabels, {\n      ariaLabels,\n      toolsHide,\n      toolsOpen,\n      tools,\n      toolsWidth,\n      onToolsToggle,\n    });\n\n    const onActiveDrawerChangeHandler = (drawerId: string | null) => {\n      onActiveDrawerChange(drawerId);\n      drawersFocusControl.setFocus();\n    };\n\n    const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(\n      controlledSplitPanelOpen,\n      onSplitPanelToggle,\n      false,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelOpen',\n        changeHandler: 'onSplitPanelToggle',\n      }\n    );\n\n    const onSplitPanelToggleHandler = () => {\n      setSplitPanelOpen(!splitPanelOpen);\n      fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });\n    };\n\n    const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(\n      controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      undefined,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelPreferences',\n        changeHandler: 'onSplitPanelPreferencesChange',\n      }\n    );\n\n    const onSplitPanelPreferencesChangeHandler = (detail: AppLayoutProps.SplitPanelPreferences) => {\n      setSplitPanelPreferences(detail);\n      splitPanelFocusControl.setLastInteraction({ type: 'position' });\n      fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n    };\n\n    const [splitPanelSize = 0, setSplitPanelSize] = useControllable(\n      controlledSplitPanelSize,\n      onSplitPanelResize,\n      getSplitPanelDefaultSize(splitPanelPreferences?.position ?? 'bottom'),\n      { componentName: 'AppLayout', controlledProp: 'splitPanelSize', changeHandler: 'onSplitPanelResize' }\n    );\n\n    const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n\n    const onSplitPanelResizeHandler = (size: number) => {\n      setSplitPanelSize(size);\n      fireNonCancelableEvent(onSplitPanelResize, { size });\n    };\n\n    const [splitPanelToggleConfig, setSplitPanelToggleConfig] = useState<SplitPanelSideToggleProps>({\n      ariaLabel: undefined,\n      displayed: false,\n    });\n\n    const drawersFocusControl = useFocusControl(!!activeDrawer?.id, !isMobile, activeDrawer?.id);\n    const navigationFocusControl = useFocusControl(navigationOpen);\n    const splitPanelFocusControl = useSplitPanelFocusControl([splitPanelPreferences, splitPanelOpen]);\n\n    useImperativeHandle(forwardRef, () => ({\n      closeNavigationIfNecessary: () => isMobile && onNavigationToggle(false),\n      openTools: () => onToolsToggle(true),\n      focusToolsClose: () => drawersFocusControl.setFocus(true),\n      focusActiveDrawer: () => drawersFocusControl.setFocus(true),\n      focusSplitPanel: () => splitPanelFocusControl.refs.slider.current?.focus(),\n    }));\n\n    const resolvedNavigation = navigationHide ? null : navigation ?? <></>;\n    const { maxDrawerSize, maxSplitPanelSize, splitPanelForcedPosition, splitPanelPosition } = computeHorizontalLayout({\n      activeDrawerSize: activeDrawer ? activeDrawerSize : 0,\n      splitPanelSize,\n      minContentWidth,\n      navigationOpen: !!resolvedNavigation && navigationOpen,\n      navigationWidth,\n      placement,\n      splitPanelOpen,\n      splitPanelPosition: splitPanelPreferences?.position,\n      isMobile,\n    });\n\n    const { registered, toolbarProps } = useMultiAppLayout({\n      forceDeduplicationType,\n      ariaLabels: ariaLabelsWithDrawers,\n      navigation: resolvedNavigation,\n      navigationOpen,\n      onNavigationToggle,\n      navigationFocusRef: navigationFocusControl.refs.toggle,\n      breadcrumbs,\n      activeDrawerId: activeDrawer?.id ?? null,\n      // only pass it down if there are non-empty drawers or tools\n      drawers: drawers?.length || !toolsHide ? drawers : undefined,\n      onActiveDrawerChange: onActiveDrawerChangeHandler,\n      drawersFocusRef: drawersFocusControl.refs.toggle,\n      splitPanel,\n      splitPanelToggleProps: {\n        ...splitPanelToggleConfig,\n        active: splitPanelOpen,\n        controlId: splitPanelControlId,\n        position: splitPanelPosition,\n      },\n      splitPanelFocusRef: splitPanelFocusControl.refs.toggle,\n      onSplitPanelToggle: onSplitPanelToggleHandler,\n    });\n\n    const hasToolbar = !embeddedViewMode && !!toolbarProps;\n    const discoveredBreadcrumbs = useGetGlobalBreadcrumbs(hasToolbar);\n\n    const verticalOffsets = computeVerticalLayout({\n      topOffset: placement.insetBlockStart,\n      hasVisibleToolbar: hasToolbar && toolbarState !== 'hide' && !isMobile,\n      notificationsHeight: notificationsHeight ?? 0,\n      toolbarHeight: toolbarHeight ?? 0,\n      stickyNotifications: !!stickyNotifications,\n    });\n\n    const appLayoutInternals: AppLayoutInternals = {\n      ariaLabels: ariaLabelsWithDrawers,\n      headerVariant,\n      isMobile,\n      breadcrumbs,\n      discoveredBreadcrumbs,\n      stickyNotifications,\n      navigationOpen,\n      navigation: resolvedNavigation,\n      navigationFocusControl,\n      activeDrawer,\n      activeDrawerSize,\n      minDrawerSize,\n      maxDrawerSize,\n      drawers: drawers!,\n      drawersFocusControl,\n      splitPanelPosition,\n      splitPanelToggleConfig,\n      splitPanelOpen,\n      splitPanelControlId,\n      splitPanelFocusControl,\n      placement,\n      toolbarState,\n      setToolbarState,\n      verticalOffsets,\n      setToolbarHeight,\n      setNotificationsHeight,\n      onSplitPanelToggle: onSplitPanelToggleHandler,\n      onNavigationToggle,\n      onActiveDrawerChange: onActiveDrawerChangeHandler,\n      onActiveDrawerResize,\n    };\n\n    const splitPanelInternals: SplitPanelProviderProps = {\n      bottomOffset: 0,\n      getMaxHeight: () => {\n        const availableHeight =\n          document.documentElement.clientHeight - placement.insetBlockStart - placement.insetBlockEnd;\n        // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n        return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n      },\n      maxWidth: maxSplitPanelSize,\n      isForcedPosition: splitPanelForcedPosition,\n      isOpen: splitPanelOpen,\n      leftOffset: 0,\n      onPreferencesChange: onSplitPanelPreferencesChangeHandler,\n      onResize: onSplitPanelResizeHandler,\n      onToggle: onSplitPanelToggleHandler,\n      position: splitPanelPosition,\n      reportSize: size => setSplitPanelReportedSize(size),\n      reportHeaderHeight: () => {\n        /*unused in this design*/\n      },\n      rightOffset: 0,\n      size: splitPanelSize,\n      topOffset: 0,\n      setSplitPanelToggle: setSplitPanelToggleConfig,\n      refs: splitPanelFocusControl.refs,\n    };\n\n    return (\n      <>\n        {/* Rendering a hidden copy of breadcrumbs to trigger their deduplication */}\n        {!hasToolbar && breadcrumbs ? <ScreenreaderOnly>{breadcrumbs}</ScreenreaderOnly> : null}\n        <SkeletonLayout\n          style={{\n            [globalVars.stickyVerticalTopOffset]: `${verticalOffsets.header}px`,\n            [globalVars.stickyVerticalBottomOffset]: `${placement.insetBlockEnd}px`,\n            paddingBlockEnd: splitPanelOpen && splitPanelPosition === 'bottom' ? splitPanelReportedSize : '',\n          }}\n          toolbar={\n            hasToolbar && <AppLayoutToolbar appLayoutInternals={appLayoutInternals} toolbarProps={toolbarProps} />\n          }\n          notifications={\n            notifications && (\n              <AppLayoutNotifications appLayoutInternals={appLayoutInternals}>{notifications}</AppLayoutNotifications>\n            )\n          }\n          contentHeader={contentHeader}\n          // delay rendering the content until registration of this instance is complete\n          content={registered ? content : null}\n          navigation={resolvedNavigation && <AppLayoutNavigation appLayoutInternals={appLayoutInternals} />}\n          navigationOpen={navigationOpen}\n          navigationWidth={navigationWidth}\n          tools={activeDrawer && <AppLayoutDrawer appLayoutInternals={appLayoutInternals} />}\n          toolsOpen={!!activeDrawer}\n          toolsWidth={activeDrawerSize}\n          sideSplitPanel={\n            splitPanelPosition === 'side' && (\n              <AppLayoutSplitPanelSide\n                appLayoutInternals={appLayoutInternals}\n                splitPanelInternals={splitPanelInternals}\n              >\n                {splitPanel}\n              </AppLayoutSplitPanelSide>\n            )\n          }\n          bottomSplitPanel={\n            splitPanelPosition === 'bottom' && (\n              <AppLayoutSplitPanelBottom\n                appLayoutInternals={appLayoutInternals}\n                splitPanelInternals={splitPanelInternals}\n              >\n                {splitPanel}\n              </AppLayoutSplitPanelBottom>\n            )\n          }\n          splitPanelOpen={splitPanelOpen}\n          placement={placement}\n          contentType={contentType}\n          maxContentWidth={maxContentWidth}\n          disableContentPaddings={disableContentPaddings}\n        />\n      </>\n    );\n  }\n);\n\nexport default AppLayoutVisualRefreshToolbar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}