{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { DndContext, DragOverlay } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { useInternalI18n } from '../../i18n/context';\nimport Portal from '../../internal/components/portal';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport ContentDisplayOption from './content-display-option';\nimport DraggableOption from './draggable-option';\nimport useDragAndDropReorder from './use-drag-and-drop-reorder';\nimport useLiveAnnouncements from './use-live-announcements';\nimport { getSortedOptions } from './utils';\nimport styles from '../styles.css.js';\nconst componentPrefix = 'content-display';\nconst getClassName = suffix => styles[`${componentPrefix}-${suffix}`];\nexport default function ContentDisplayPreference(_ref) {\n  let {\n    title,\n    description,\n    options,\n    value = options.map(_ref2 => {\n      let {\n        id\n      } = _ref2;\n      return {\n        id,\n        visible: true\n      };\n    }),\n    onChange,\n    liveAnnouncementDndStarted,\n    liveAnnouncementDndItemReordered,\n    liveAnnouncementDndItemCommitted,\n    liveAnnouncementDndDiscarded,\n    dragHandleAriaDescription,\n    dragHandleAriaLabel\n  } = _ref;\n  const idPrefix = useUniqueId(componentPrefix);\n  const i18n = useInternalI18n('collection-preferences');\n  const onToggle = option => {\n    onChange(value.map(item => item.id === option.id ? Object.assign(Object.assign({}, item), {\n      visible: !option.visible\n    }) : item));\n  };\n  const titleId = `${idPrefix}-title`;\n  const descriptionId = `${idPrefix}-description`;\n  const sortedOptions = getSortedOptions({\n    options,\n    contentDisplay: value\n  });\n  const {\n    activeItem,\n    collisionDetection,\n    handleKeyDown,\n    sensors,\n    setActiveItem\n  } = useDragAndDropReorder({\n    sortedOptions\n  });\n  const activeOption = activeItem ? sortedOptions.find(_ref3 => {\n    let {\n      id\n    } = _ref3;\n    return id === activeItem;\n  }) : null;\n  const announcements = useLiveAnnouncements({\n    isDragging: activeItem !== null,\n    liveAnnouncementDndStarted: i18n('contentDisplayPreference.liveAnnouncementDndStarted', liveAnnouncementDndStarted, format => (position, total) => format({\n      position,\n      total\n    })),\n    liveAnnouncementDndItemReordered: i18n('contentDisplayPreference.liveAnnouncementDndItemReordered', liveAnnouncementDndItemReordered, format => (initialPosition, currentPosition, total) => format({\n      currentPosition,\n      total,\n      isInitialPosition: `${initialPosition === currentPosition}`\n    })),\n    liveAnnouncementDndItemCommitted: i18n('contentDisplayPreference.liveAnnouncementDndItemCommitted', liveAnnouncementDndItemCommitted, format => (initialPosition, finalPosition, total) => format({\n      initialPosition,\n      finalPosition,\n      total,\n      isInitialPosition: `${initialPosition === finalPosition}`\n    })),\n    liveAnnouncementDndDiscarded: i18n('contentDisplayPreference.liveAnnouncementDndDiscarded', liveAnnouncementDndDiscarded),\n    sortedOptions: value\n  });\n  const renderedDragHandleAriaDescription = i18n('contentDisplayPreference.dragHandleAriaDescription', dragHandleAriaDescription);\n  return React.createElement(\"div\", {\n    className: styles[componentPrefix]\n  }, React.createElement(\"h3\", {\n    className: getClassName('title'),\n    id: titleId\n  }, i18n('contentDisplayPreference.title', title)), React.createElement(\"p\", {\n    className: getClassName('description'),\n    id: descriptionId\n  }, i18n('contentDisplayPreference.description', description)), React.createElement(DndContext, {\n    sensors: sensors,\n    collisionDetection: collisionDetection,\n    accessibility: {\n      announcements,\n      restoreFocus: false,\n      screenReaderInstructions: renderedDragHandleAriaDescription ? {\n        draggable: renderedDragHandleAriaDescription\n      } : undefined\n    },\n    onDragStart: _ref4 => {\n      let {\n        active\n      } = _ref4;\n      return setActiveItem(active.id);\n    },\n    onDragEnd: event => {\n      setActiveItem(null);\n      const {\n        active,\n        over\n      } = event;\n      if (over && active.id !== over.id) {\n        const oldIndex = value.findIndex(_ref5 => {\n          let {\n            id\n          } = _ref5;\n          return id === active.id;\n        });\n        const newIndex = value.findIndex(_ref6 => {\n          let {\n            id\n          } = _ref6;\n          return id === over.id;\n        });\n        onChange(arrayMove([...value], oldIndex, newIndex));\n      }\n    },\n    onDragCancel: () => setActiveItem(null)\n  }, React.createElement(\"ul\", {\n    className: getClassName('option-list'),\n    \"aria-describedby\": descriptionId,\n    \"aria-labelledby\": titleId,\n    role: \"list\"\n  }, React.createElement(SortableContext, {\n    items: sortedOptions.map(_ref7 => {\n      let {\n        id\n      } = _ref7;\n      return id;\n    }),\n    strategy: verticalListSortingStrategy\n  }, sortedOptions.map(option => {\n    return React.createElement(DraggableOption, {\n      dragHandleAriaLabel: i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel),\n      key: option.id,\n      onKeyDown: handleKeyDown,\n      onToggle: onToggle,\n      option: option\n    });\n  }))), React.createElement(Portal, null, React.createElement(DragOverlay, {\n    className: styles['drag-overlay'],\n    dropAnimation: null,\n    style: {\n      zIndex: 5000\n    }\n  }, activeOption && React.createElement(ContentDisplayOption, {\n    listeners: {\n      onKeyDown: handleKeyDown\n    },\n    dragHandleAriaLabel: i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel),\n    onToggle: onToggle,\n    option: activeOption\n  })))));\n}","map":{"version":3,"names":["React","DndContext","DragOverlay","arrayMove","SortableContext","verticalListSortingStrategy","useInternalI18n","Portal","useUniqueId","ContentDisplayOption","DraggableOption","useDragAndDropReorder","useLiveAnnouncements","getSortedOptions","styles","componentPrefix","getClassName","suffix","ContentDisplayPreference","_ref","title","description","options","value","map","_ref2","id","visible","onChange","liveAnnouncementDndStarted","liveAnnouncementDndItemReordered","liveAnnouncementDndItemCommitted","liveAnnouncementDndDiscarded","dragHandleAriaDescription","dragHandleAriaLabel","idPrefix","i18n","onToggle","option","item","Object","assign","titleId","descriptionId","sortedOptions","contentDisplay","activeItem","collisionDetection","handleKeyDown","sensors","setActiveItem","activeOption","find","_ref3","announcements","isDragging","format","position","total","initialPosition","currentPosition","isInitialPosition","finalPosition","renderedDragHandleAriaDescription","createElement","className","accessibility","restoreFocus","screenReaderInstructions","draggable","undefined","onDragStart","_ref4","active","onDragEnd","event","over","oldIndex","findIndex","_ref5","newIndex","_ref6","onDragCancel","role","items","_ref7","strategy","key","onKeyDown","dropAnimation","style","zIndex","listeners"],"sources":["/home/jj/aws-threat-model-app/node_modules/src/collection-preferences/content-display/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { DndContext, DragOverlay } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';\n\nimport { useInternalI18n } from '../../i18n/context';\nimport Portal from '../../internal/components/portal';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { CollectionPreferencesProps } from '../interfaces';\nimport ContentDisplayOption from './content-display-option';\nimport DraggableOption from './draggable-option';\nimport useDragAndDropReorder from './use-drag-and-drop-reorder';\nimport useLiveAnnouncements from './use-live-announcements';\nimport { getSortedOptions, OptionWithVisibility } from './utils';\n\nimport styles from '../styles.css.js';\n\nconst componentPrefix = 'content-display';\n\nconst getClassName = (suffix: string) => styles[`${componentPrefix}-${suffix}`];\n\ninterface ContentDisplayPreferenceProps extends CollectionPreferencesProps.ContentDisplayPreference {\n  onChange: (value: ReadonlyArray<CollectionPreferencesProps.ContentDisplayItem>) => void;\n  value?: ReadonlyArray<CollectionPreferencesProps.ContentDisplayItem>;\n}\n\nexport default function ContentDisplayPreference({\n  title,\n  description,\n  options,\n  value = options.map(({ id }) => ({\n    id,\n    visible: true,\n  })),\n  onChange,\n  liveAnnouncementDndStarted,\n  liveAnnouncementDndItemReordered,\n  liveAnnouncementDndItemCommitted,\n  liveAnnouncementDndDiscarded,\n  dragHandleAriaDescription,\n  dragHandleAriaLabel,\n}: ContentDisplayPreferenceProps) {\n  const idPrefix = useUniqueId(componentPrefix);\n  const i18n = useInternalI18n('collection-preferences');\n\n  const onToggle = (option: OptionWithVisibility) => {\n    onChange(value.map(item => (item.id === option.id ? { ...item, visible: !option.visible } : item)));\n  };\n\n  const titleId = `${idPrefix}-title`;\n  const descriptionId = `${idPrefix}-description`;\n\n  const sortedOptions = getSortedOptions({ options, contentDisplay: value });\n\n  const { activeItem, collisionDetection, handleKeyDown, sensors, setActiveItem } = useDragAndDropReorder({\n    sortedOptions,\n  });\n\n  const activeOption = activeItem ? sortedOptions.find(({ id }) => id === activeItem) : null;\n\n  const announcements = useLiveAnnouncements({\n    isDragging: activeItem !== null,\n    liveAnnouncementDndStarted: i18n(\n      'contentDisplayPreference.liveAnnouncementDndStarted',\n      liveAnnouncementDndStarted,\n      format => (position, total) => format({ position, total })\n    ),\n    liveAnnouncementDndItemReordered: i18n(\n      'contentDisplayPreference.liveAnnouncementDndItemReordered',\n      liveAnnouncementDndItemReordered,\n      format => (initialPosition, currentPosition, total) =>\n        format({ currentPosition, total, isInitialPosition: `${initialPosition === currentPosition}` })\n    ),\n    liveAnnouncementDndItemCommitted: i18n(\n      'contentDisplayPreference.liveAnnouncementDndItemCommitted',\n      liveAnnouncementDndItemCommitted,\n      format => (initialPosition, finalPosition, total) =>\n        format({ initialPosition, finalPosition, total, isInitialPosition: `${initialPosition === finalPosition}` })\n    ),\n    liveAnnouncementDndDiscarded: i18n(\n      'contentDisplayPreference.liveAnnouncementDndDiscarded',\n      liveAnnouncementDndDiscarded\n    ),\n    sortedOptions: value,\n  });\n\n  const renderedDragHandleAriaDescription = i18n(\n    'contentDisplayPreference.dragHandleAriaDescription',\n    dragHandleAriaDescription\n  );\n\n  return (\n    <div className={styles[componentPrefix]}>\n      <h3 className={getClassName('title')} id={titleId}>\n        {i18n('contentDisplayPreference.title', title)}\n      </h3>\n      <p className={getClassName('description')} id={descriptionId}>\n        {i18n('contentDisplayPreference.description', description)}\n      </p>\n      <DndContext\n        sensors={sensors}\n        collisionDetection={collisionDetection}\n        accessibility={{\n          announcements,\n          restoreFocus: false,\n          screenReaderInstructions: renderedDragHandleAriaDescription\n            ? { draggable: renderedDragHandleAriaDescription }\n            : undefined,\n        }}\n        onDragStart={({ active }) => setActiveItem(active.id)}\n        onDragEnd={event => {\n          setActiveItem(null);\n          const { active, over } = event;\n\n          if (over && active.id !== over.id) {\n            const oldIndex = value.findIndex(({ id }) => id === active.id);\n            const newIndex = value.findIndex(({ id }) => id === over.id);\n            onChange(arrayMove([...value], oldIndex, newIndex));\n          }\n        }}\n        onDragCancel={() => setActiveItem(null)}\n      >\n        {/* Use explicit list role to work around Safari not announcing lists as such when list-style is set to none.\n            See https://bugs.webkit.org/show_bug.cgi?id=170179 */}\n        <ul\n          className={getClassName('option-list')}\n          aria-describedby={descriptionId}\n          aria-labelledby={titleId}\n          role=\"list\"\n        >\n          <SortableContext items={sortedOptions.map(({ id }) => id)} strategy={verticalListSortingStrategy}>\n            {sortedOptions.map(option => {\n              return (\n                <DraggableOption\n                  dragHandleAriaLabel={i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel)}\n                  key={option.id}\n                  onKeyDown={handleKeyDown}\n                  onToggle={onToggle}\n                  option={option}\n                />\n              );\n            })}\n          </SortableContext>\n        </ul>\n        <Portal>\n          {/* Make sure that the drag overlay is above the modal\n              by assigning the z-index as inline style\n              so that it prevails over dnd-kit's inline z-index of 999  */}\n          {/* className is a documented prop of the DragOverlay component:\n              https://docs.dndkit.com/api-documentation/draggable/drag-overlay#class-name-and-inline-styles */\n          /* eslint-disable-next-line react/forbid-component-props */}\n          <DragOverlay className={styles['drag-overlay']} dropAnimation={null} style={{ zIndex: 5000 }}>\n            {activeOption && (\n              <ContentDisplayOption\n                listeners={{ onKeyDown: handleKeyDown }}\n                dragHandleAriaLabel={i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel)}\n                onToggle={onToggle}\n                option={activeOption}\n              />\n            )}\n          </DragOverlay>\n        </Portal>\n      </DndContext>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}