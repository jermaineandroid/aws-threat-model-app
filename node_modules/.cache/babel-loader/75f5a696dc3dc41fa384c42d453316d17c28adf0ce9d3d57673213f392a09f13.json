{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef } from 'react';\nimport DragHandle from '../../internal/components/drag-handle';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalToggle from '../../toggle/internal';\nimport styles from '../styles.css.js';\nconst componentPrefix = 'content-display-option';\nexport const getClassName = suffix => styles[[componentPrefix, suffix].filter(Boolean).join('-')];\nconst ContentDisplayOption = forwardRef((_ref, ref) => {\n  let {\n    dragHandleAriaLabel,\n    listeners,\n    onToggle,\n    option\n  } = _ref;\n  const idPrefix = useUniqueId(componentPrefix);\n  const controlId = `${idPrefix}-control-${option.id}`;\n  const dragHandleAttributes = {\n    ['aria-label']: [dragHandleAriaLabel, option.label].join(', ')\n  };\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: getClassName('content')\n  }, React.createElement(DragHandle, {\n    attributes: dragHandleAttributes,\n    listeners: listeners\n  }), React.createElement(\"label\", {\n    className: getClassName('label'),\n    htmlFor: controlId\n  }, option.label), React.createElement(\"div\", {\n    className: getClassName('toggle')\n  }, React.createElement(InternalToggle, {\n    checked: !!option.visible,\n    onChange: () => onToggle && onToggle(option),\n    disabled: option.alwaysVisible === true,\n    controlId: controlId\n  })));\n});\nexport default ContentDisplayOption;","map":{"version":3,"names":["React","forwardRef","DragHandle","useUniqueId","InternalToggle","styles","componentPrefix","getClassName","suffix","filter","Boolean","join","ContentDisplayOption","_ref","ref","dragHandleAriaLabel","listeners","onToggle","option","idPrefix","controlId","id","dragHandleAttributes","label","createElement","className","attributes","htmlFor","checked","visible","onChange","disabled","alwaysVisible"],"sources":["/home/jj/aws-threat-model-app/node_modules/src/collection-preferences/content-display/content-display-option.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { ForwardedRef, forwardRef } from 'react';\nimport { SyntheticListenerMap } from '@dnd-kit/core/dist/hooks/utilities';\n\nimport DragHandle from '../../internal/components/drag-handle';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalToggle from '../../toggle/internal';\nimport { OptionWithVisibility } from './utils';\n\nimport styles from '../styles.css.js';\n\nconst componentPrefix = 'content-display-option';\nexport const getClassName = (suffix?: string) => styles[[componentPrefix, suffix].filter(Boolean).join('-')];\n\nexport interface ContentDisplayOptionProps {\n  dragHandleAriaLabel?: string;\n  listeners?: SyntheticListenerMap;\n  onToggle?: (option: OptionWithVisibility) => void;\n  option: OptionWithVisibility;\n}\n\nconst ContentDisplayOption = forwardRef(\n  (\n    { dragHandleAriaLabel, listeners, onToggle, option }: ContentDisplayOptionProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    const idPrefix = useUniqueId(componentPrefix);\n    const controlId = `${idPrefix}-control-${option.id}`;\n\n    const dragHandleAttributes = {\n      ['aria-label']: [dragHandleAriaLabel, option.label].join(', '),\n    };\n\n    return (\n      <div ref={ref} className={getClassName('content')}>\n        <DragHandle attributes={dragHandleAttributes} listeners={listeners} />\n\n        <label className={getClassName('label')} htmlFor={controlId}>\n          {option.label}\n        </label>\n        <div className={getClassName('toggle')}>\n          <InternalToggle\n            checked={!!option.visible}\n            onChange={() => onToggle && onToggle(option)}\n            disabled={option.alwaysVisible === true}\n            controlId={controlId}\n          />\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default ContentDisplayOption;\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAkBC,UAAU,QAAQ,OAAO;AAGvD,OAAOC,UAAU,MAAM,uCAAuC;AAC9D,SAASC,WAAW,QAAQ,oCAAoC;AAChE,OAAOC,cAAc,MAAM,uBAAuB;AAGlD,OAAOC,MAAM,MAAM,kBAAkB;AAErC,MAAMC,eAAe,GAAG,wBAAwB;AAChD,OAAO,MAAMC,YAAY,GAAIC,MAAe,IAAKH,MAAM,CAAC,CAACC,eAAe,EAAEE,MAAM,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC;AAS5G,MAAMC,oBAAoB,GAAGX,UAAU,CACrC,CAAAY,IAAA,EAEEC,GAAiC,KAC/B;EAAA,IAFF;IAAEC,mBAAmB;IAAEC,SAAS;IAAEC,QAAQ;IAAEC;EAAM,CAA6B,GAAAL,IAAA;EAG/E,MAAMM,QAAQ,GAAGhB,WAAW,CAACG,eAAe,CAAC;EAC7C,MAAMc,SAAS,GAAG,GAAGD,QAAQ,YAAYD,MAAM,CAACG,EAAE,EAAE;EAEpD,MAAMC,oBAAoB,GAAG;IAC3B,CAAC,YAAY,GAAG,CAACP,mBAAmB,EAAEG,MAAM,CAACK,KAAK,CAAC,CAACZ,IAAI,CAAC,IAAI;GAC9D;EAED,OACEX,KAAA,CAAAwB,aAAA;IAAKV,GAAG,EAAEA,GAAG;IAAEW,SAAS,EAAElB,YAAY,CAAC,SAAS;EAAC,GAC/CP,KAAA,CAAAwB,aAAA,CAACtB,UAAU;IAACwB,UAAU,EAAEJ,oBAAoB;IAAEN,SAAS,EAAEA;EAAS,EAAI,EAEtEhB,KAAA,CAAAwB,aAAA;IAAOC,SAAS,EAAElB,YAAY,CAAC,OAAO,CAAC;IAAEoB,OAAO,EAAEP;EAAS,GACxDF,MAAM,CAACK,KAAK,CACP,EACRvB,KAAA,CAAAwB,aAAA;IAAKC,SAAS,EAAElB,YAAY,CAAC,QAAQ;EAAC,GACpCP,KAAA,CAAAwB,aAAA,CAACpB,cAAc;IACbwB,OAAO,EAAE,CAAC,CAACV,MAAM,CAACW,OAAO;IACzBC,QAAQ,EAAEA,CAAA,KAAMb,QAAQ,IAAIA,QAAQ,CAACC,MAAM,CAAC;IAC5Ca,QAAQ,EAAEb,MAAM,CAACc,aAAa,KAAK,IAAI;IACvCZ,SAAS,EAAEA;EAAS,EACpB,CACE,CACF;AAEV,CAAC,CACF;AAED,eAAeR,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}